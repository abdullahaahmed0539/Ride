/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MulticallTest, MulticallTestInterface } from "../MulticallTest";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract MulticallTokenMock",
        name: "multicallToken",
        type: "address",
      },
      {
        internalType: "address[]",
        name: "recipients",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
    ],
    name: "testReturnValues",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105fc806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063bc548f7614610030575b600080fd5b61004361003e3660046102e0565b610045565b005b60008367ffffffffffffffff81111561006057610060610363565b60405190808252806020026020018201604052801561009357816020015b606081526020019060019003908161007e5790505b50905060005b8481101561017c578585828181106100b3576100b3610379565b90506020020160208101906100c8919061038f565b8484838181106100da576100da610379565b60405173ffffffffffffffffffffffffffffffffffffffff9094166024850152602002919091013560448301525060640160408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052825183908390811061015e5761015e610379565b60200260200101819052508080610174906103b3565b915050610099565b50604051631592ca1b60e31b815260009073ffffffffffffffffffffffffffffffffffffffff88169063ac9650d8906101b990859060040161040c565b600060405180830381600087803b1580156101d357600080fd5b505af11580156101e7573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f1916820160405261020f91908101906104b7565b905060005b81518110156102655781818151811061022f5761022f610379565b602002602001015180602001905181019061024a91906105cd565b61025357600080fd5b8061025d816103b3565b915050610214565b5050505050505050565b73ffffffffffffffffffffffffffffffffffffffff8116811461029157600080fd5b50565b60008083601f8401126102a657600080fd5b50813567ffffffffffffffff8111156102be57600080fd5b6020830191508360208260051b85010111156102d957600080fd5b9250929050565b6000806000806000606086880312156102f857600080fd5b85356103038161026f565b9450602086013567ffffffffffffffff8082111561032057600080fd5b61032c89838a01610294565b9096509450604088013591508082111561034557600080fd5b5061035288828901610294565b969995985093965092949392505050565b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b6000602082840312156103a157600080fd5b81356103ac8161026f565b9392505050565b60006000198214156103d557634e487b7160e01b600052601160045260246000fd5b5060010190565b60005b838110156103f75781810151838201526020016103df565b83811115610406576000848401525b50505050565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561047957878503603f190184528151805180875261045a818989018a85016103dc565b601f01601f191695909501860194509285019290850190600101610433565b5092979650505050505050565b604051601f8201601f1916810167ffffffffffffffff811182821017156104af576104af610363565b604052919050565b600060208083850312156104ca57600080fd5b825167ffffffffffffffff808211156104e257600080fd5b8185019150601f86818401126104f757600080fd5b82518281111561050957610509610363565b8060051b610518868201610486565b918252848101860191868101908a84111561053257600080fd5b87870192505b838310156105bf578251868111156105505760008081fd5b8701603f81018c136105625760008081fd5b8881015160408882111561057857610578610363565b610589828901601f19168c01610486565b8281528e8284860101111561059e5760008081fd5b6105ad838d83018487016103dc565b85525050509187019190870190610538565b9a9950505050505050505050565b6000602082840312156105df57600080fd5b815180151581146103ac57600080fdfea164736f6c6343000809000a";

type MulticallTestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MulticallTestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MulticallTest__factory extends ContractFactory {
  constructor(...args: MulticallTestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MulticallTest> {
    return super.deploy(overrides || {}) as Promise<MulticallTest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MulticallTest {
    return super.attach(address) as MulticallTest;
  }
  connect(signer: Signer): MulticallTest__factory {
    return super.connect(signer) as MulticallTest__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MulticallTestInterface {
    return new utils.Interface(_abi) as MulticallTestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MulticallTest {
    return new Contract(address, _abi, signerOrProvider) as MulticallTest;
  }
}
