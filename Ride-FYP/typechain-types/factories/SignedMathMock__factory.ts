/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignedMathMock,
  SignedMathMockInterface,
} from "../SignedMathMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "int256",
        name: "n",
        type: "int256",
      },
    ],
    name: "abs",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "average",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "max",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "int256",
        name: "a",
        type: "int256",
      },
      {
        internalType: "int256",
        name: "b",
        type: "int256",
      },
    ],
    name: "min",
    outputs: [
      {
        internalType: "int256",
        name: "",
        type: "int256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061020f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631b5ac4b51461005157806329aa9cbe146100765780637f0bb2921461008957806381fe57861461009c575b600080fd5b61006461005f366004610158565b6100af565b60405190815260200160405180910390f35b610064610084366004610171565b6100c0565b610064610097366004610171565b6100d3565b6100646100aa366004610171565b6100df565b60006100ba826100eb565b92915050565b60006100cc8383610102565b9392505050565b60006100cc8383610118565b60006100cc8383610148565b6000808212156100fe57816000036100ba565b5090565b600081831261011157816100cc565b5090919050565b60008061012c84841860011d8585166101a9565b905061014060ff82901c85851816826101a9565b949350505050565b60008183121561011157816100cc565b60006020828403121561016a57600080fd5b5035919050565b6000806040838503121561018457600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156101e3576101e3610193565b600160ff1b83900384128116156101fc576101fc610193565b5050019056fea164736f6c6343000809000a";

type SignedMathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignedMathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignedMathMock__factory extends ContractFactory {
  constructor(...args: SignedMathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignedMathMock> {
    return super.deploy(overrides || {}) as Promise<SignedMathMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignedMathMock {
    return super.attach(address) as SignedMathMock;
  }
  connect(signer: Signer): SignedMathMock__factory {
    return super.connect(signer) as SignedMathMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignedMathMockInterface {
    return new utils.Interface(_abi) as SignedMathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignedMathMock {
    return new Contract(address, _abi, signerOrProvider) as SignedMathMock;
  }
}
