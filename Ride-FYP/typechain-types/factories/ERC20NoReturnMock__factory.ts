/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20NoReturnMock,
  ERC20NoReturnMockInterface,
} from "../ERC20NoReturnMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "allowance_",
        type: "uint256",
      },
    ],
    name: "setAllowance",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101ee806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c80633ba93f26116100505780633ba93f261461009d578063a9059cbb1461006c578063dd62ed3e146100bd57600080fd5b8063095ea7b31461006c57806323b872dd14610085575b600080fd5b61008361007a36600461012f565b50506000600155565b005b610083610093366004610159565b5050600060015550565b6100836100ab366004610195565b33600090815260208190526040902055565b6100f46100cb3660046101ae565b5073ffffffffffffffffffffffffffffffffffffffff1660009081526020819052604090205490565b60405190815260200160405180910390f35b803573ffffffffffffffffffffffffffffffffffffffff8116811461012a57600080fd5b919050565b6000806040838503121561014257600080fd5b61014b83610106565b946020939093013593505050565b60008060006060848603121561016e57600080fd5b61017784610106565b925061018560208501610106565b9150604084013590509250925092565b6000602082840312156101a757600080fd5b5035919050565b600080604083850312156101c157600080fd5b6101ca83610106565b91506101d860208401610106565b9050925092905056fea164736f6c6343000809000a";

type ERC20NoReturnMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20NoReturnMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20NoReturnMock__factory extends ContractFactory {
  constructor(...args: ERC20NoReturnMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20NoReturnMock> {
    return super.deploy(overrides || {}) as Promise<ERC20NoReturnMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20NoReturnMock {
    return super.attach(address) as ERC20NoReturnMock;
  }
  connect(signer: Signer): ERC20NoReturnMock__factory {
    return super.connect(signer) as ERC20NoReturnMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20NoReturnMockInterface {
    return new utils.Interface(_abi) as ERC20NoReturnMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20NoReturnMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20NoReturnMock;
  }
}
