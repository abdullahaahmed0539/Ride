/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  Signer,
  utils,
  Contract,
  ContractFactory,
  Overrides,
  BigNumberish,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20SnapshotMock,
  ERC20SnapshotMockInterface,
} from "../ERC20SnapshotMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
      {
        internalType: "address",
        name: "initialAccount",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "initialBalance",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "Snapshot",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "balanceOfAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "subtractedValue",
        type: "uint256",
      },
    ],
    name: "decreaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "addedValue",
        type: "uint256",
      },
    ],
    name: "increaseAllowance",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "snapshot",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "snapshotId",
        type: "uint256",
      },
    ],
    name: "totalSupplyAt",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620016153803806200161583398101604081905262000034916200045b565b8351849084906200004d906003906020850190620002e8565b50805162000063906004906020840190620002e8565b5050506200007882826200008260201b60201c565b505050506200058c565b6001600160a01b038216620000dd5760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b620000eb6000838362000178565b8060026000828254620000ff919062000504565b90915550506001600160a01b038216600090815260208190526040812080548392906200012e90849062000504565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b62000190838383620001b460201b620005971760201c565b6001600160a01b038316620001b957620001aa82620001e4565b620001b46200021c565b505050565b6001600160a01b038216620001d357620001aa83620001e4565b620001de83620001e4565b620001b4825b6001600160a01b038116600090815260056020908152604080832091839052909120546200021991906200022e565b6200022e565b50565b6200022c60066200021360025490565b565b60006200023a6200027d565b90508062000248846200029b565b1015620001b4578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b6000620002966008620002e460201b6200059c1760201c565b905090565b8054600090620002ad57506000919050565b81548290620002bf906001906200051f565b81548110620002d257620002d262000539565b90600052602060002001549050919050565b5490565b828054620002f6906200054f565b90600052602060002090601f0160209004810192826200031a576000855562000365565b82601f106200033557805160ff191683800117855562000365565b8280016001018555821562000365579182015b828111156200036557825182559160200191906001019062000348565b506200037392915062000377565b5090565b5b8082111562000373576000815560010162000378565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620003b657600080fd5b81516001600160401b0380821115620003d357620003d36200038e565b604051601f8301601f19908116603f01168101908282118183101715620003fe57620003fe6200038e565b816040528381526020925086838588010111156200041b57600080fd5b600091505b838210156200043f578582018301518183018401529082019062000420565b83821115620004515760008385830101525b9695505050505050565b600080600080608085870312156200047257600080fd5b84516001600160401b03808211156200048a57600080fd5b6200049888838901620003a4565b95506020870151915080821115620004af57600080fd5b50620004be87828801620003a4565b604087015190945090506001600160a01b0381168114620004de57600080fd5b6060959095015193969295505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156200051a576200051a620004ee565b500190565b600082821015620005345762000534620004ee565b500390565b634e487b7160e01b600052603260045260246000fd5b600181811c908216806200056457607f821691505b602082108114156200058657634e487b7160e01b600052602260045260246000fd5b50919050565b611079806200059c6000396000f3fe608060405234801561001057600080fd5b50600436106101005760003560e01c806370a08231116100975780639dc29fac116100665780639dc29fac14610201578063a457c2d714610214578063a9059cbb14610227578063dd62ed3e1461023a57600080fd5b806370a08231146101b557806395d89b41146101de5780639711715a146101e6578063981b24d0146101ee57600080fd5b8063313ce567116100d3578063313ce5671461016b578063395093511461017a57806340c10f191461018d5780634ee2cd7e146101a257600080fd5b806306fdde0314610105578063095ea7b31461012357806318160ddd1461014657806323b872dd14610158575b600080fd5b61010d610273565b60405161011a9190610e7b565b60405180910390f35b610136610131366004610ee7565b610305565b604051901515815260200161011a565b6002545b60405190815260200161011a565b610136610166366004610f11565b61031c565b6040516012815260200161011a565b610136610188366004610ee7565b6103e7565b6101a061019b366004610ee7565b610423565b005b61014a6101b0366004610ee7565b610431565b61014a6101c3366004610f4d565b6001600160a01b031660009081526020819052604090205490565b61010d61048a565b6101a0610499565b61014a6101fc366004610f68565b6104a4565b6101a061020f366004610ee7565b6104cf565b610136610222366004610ee7565b6104d9565b610136610235366004610ee7565b61058a565b61014a610248366004610f81565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461028290610fb4565b80601f01602080910402602001604051908101604052809291908181526020018280546102ae90610fb4565b80156102fb5780601f106102d0576101008083540402835291602001916102fb565b820191906000526020600020905b8154815290600101906020018083116102de57829003601f168201915b5050505050905090565b60006103123384846105a0565b5060015b92915050565b6001600160a01b038316600090815260016020908152604080832033845290915281205460001981146103d157828110156103c45760405162461bcd60e51b815260206004820152602860248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206160448201527f6c6c6f77616e636500000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6103d185338584036105a0565b6103dc8585856106c4565b506001949350505050565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909161031291859061041e908690611005565b6105a0565b61042d82826108cd565b5050565b6001600160a01b0382166000908152600560205260408120819081906104589085906109b8565b915091508161047f576001600160a01b038516600090815260208190526040902054610481565b805b95945050505050565b60606004805461028290610fb4565b6104a1610ab6565b50565b60008060006104b48460066109b8565b91509150816104c5576002546104c7565b805b949350505050565b61042d8282610b10565b3360009081526001602090815260408083206001600160a01b0386168452909152812054828110156105735760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084016103bb565b61058033858584036105a0565b5060019392505050565b60006103123384846106c4565b505050565b5490565b6001600160a01b0383166106025760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103bb565b6001600160a01b0382166106635760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103bb565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b0383166107405760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103bb565b6001600160a01b0382166107a25760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103bb565b6107ad838383610c6a565b6001600160a01b0383166000908152602081905260409020548181101561083c5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103bb565b6001600160a01b03808516600090815260208190526040808220858503905591851681529081208054849290610873908490611005565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef846040516108bf91815260200190565b60405180910390a350505050565b6001600160a01b0382166109235760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f20616464726573730060448201526064016103bb565b61092f60008383610c6a565b80600260008282546109419190611005565b90915550506001600160a01b0382166000908152602081905260408120805483929061096e908490611005565b90915550506040518181526001600160a01b038316906000907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b60008060008411610a0b5760405162461bcd60e51b815260206004820152601660248201527f4552433230536e617073686f743a20696420697320300000000000000000000060448201526064016103bb565b610a13610cb2565b841115610a625760405162461bcd60e51b815260206004820152601d60248201527f4552433230536e617073686f743a206e6f6e6578697374656e7420696400000060448201526064016103bb565b6000610a6e8486610cc2565b8454909150811415610a87576000809250925050610aaf565b6001846001018281548110610a9e57610a9e61101d565b906000526020600020015492509250505b9250929050565b6000610ac6600880546001019055565b6000610ad0610cb2565b90507f8030e83b04d87bef53480e26263266d6ca66863aa8506aca6f2559d18aa1cb6781604051610b0391815260200190565b60405180910390a1919050565b6001600160a01b038216610b705760405162461bcd60e51b815260206004820152602160248201527f45524332303a206275726e2066726f6d20746865207a65726f206164647265736044820152607360f81b60648201526084016103bb565b610b7c82600083610c6a565b6001600160a01b03821660009081526020819052604090205481811015610bf05760405162461bcd60e51b815260206004820152602260248201527f45524332303a206275726e20616d6f756e7420657863656564732062616c616e604482015261636560f01b60648201526084016103bb565b6001600160a01b0383166000908152602081905260408120838303905560028054849290610c1f908490611033565b90915550506040518281526000906001600160a01b038516907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a3505050565b6001600160a01b038316610c8957610c8182610d85565b610597610db7565b6001600160a01b038216610ca057610c8183610d85565b610ca983610d85565b61059782610d85565b6000610cbd60085490565b905090565b8154600090610cd357506000610316565b82546000905b80821015610d2f576000610ced8383610dc7565b905084868281548110610d0257610d0261101d565b90600052602060002001541115610d1b57809150610d29565b610d26816001611005565b92505b50610cd9565b600082118015610d6457508385610d47600185611033565b81548110610d5757610d5761101d565b9060005260206000200154145b15610d7d57610d74600183611033565b92505050610316565b509050610316565b6001600160a01b038116600090815260056020908152604080832091839052909120546104a19190610de9565b610de9565b610dc56006610db260025490565b565b6000610dd6600284841861104a565b610de290848416611005565b9392505050565b6000610df3610cb2565b905080610dff84610e33565b1015610597578254600180820185556000858152602080822090930193909355938401805494850181558252902090910155565b8054600090610e4457506000919050565b81548290610e5490600190611033565b81548110610e6457610e6461101d565b90600052602060002001549050919050565b919050565b600060208083528351808285015260005b81811015610ea857858101830151858201604001528201610e8c565b81811115610eba576000604083870101525b50601f01601f1916929092016040019392505050565b80356001600160a01b0381168114610e7657600080fd5b60008060408385031215610efa57600080fd5b610f0383610ed0565b946020939093013593505050565b600080600060608486031215610f2657600080fd5b610f2f84610ed0565b9250610f3d60208501610ed0565b9150604084013590509250925092565b600060208284031215610f5f57600080fd5b610de282610ed0565b600060208284031215610f7a57600080fd5b5035919050565b60008060408385031215610f9457600080fd5b610f9d83610ed0565b9150610fab60208401610ed0565b90509250929050565b600181811c90821680610fc857607f821691505b60208210811415610fe957634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b6000821982111561101857611018610fef565b500190565b634e487b7160e01b600052603260045260246000fd5b60008282101561104557611045610fef565b500390565b60008261106757634e487b7160e01b600052601260045260246000fd5b50049056fea164736f6c6343000809000a";

type ERC20SnapshotMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20SnapshotMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20SnapshotMock__factory extends ContractFactory {
  constructor(...args: ERC20SnapshotMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20SnapshotMock> {
    return super.deploy(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    ) as Promise<ERC20SnapshotMock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    initialAccount: string,
    initialBalance: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name,
      symbol,
      initialAccount,
      initialBalance,
      overrides || {}
    );
  }
  attach(address: string): ERC20SnapshotMock {
    return super.attach(address) as ERC20SnapshotMock;
  }
  connect(signer: Signer): ERC20SnapshotMock__factory {
    return super.connect(signer) as ERC20SnapshotMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20SnapshotMockInterface {
    return new utils.Interface(_abi) as ERC20SnapshotMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20SnapshotMock {
    return new Contract(address, _abi, signerOrProvider) as ERC20SnapshotMock;
  }
}
