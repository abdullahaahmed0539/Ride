/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Controller, ControllerInterface } from "../Controller";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "bookingID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "riderID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "driverID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "bookingTime",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "pickup",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "dropoff",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "status",
        type: "string",
      },
    ],
    name: "Booking",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "bookingID",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "distance",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "startTime",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "endTime",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "total",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "fuelCost",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "waitTimeCostPerMin",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "disputeCost",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "waitTimeCost",
        type: "string",
      },
      {
        indexed: false,
        internalType: "string",
        name: "milesCost",
        type: "string",
      },
    ],
    name: "Trip",
    type: "event",
  },
  {
    stateMutability: "payable",
    type: "fallback",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "bookingID",
        type: "string",
      },
      {
        internalType: "string",
        name: "riderID",
        type: "string",
      },
      {
        internalType: "string",
        name: "driverID",
        type: "string",
      },
      {
        internalType: "string",
        name: "bookingTime",
        type: "string",
      },
      {
        internalType: "string",
        name: "pickup",
        type: "string",
      },
      {
        internalType: "string",
        name: "dropoff",
        type: "string",
      },
      {
        internalType: "string",
        name: "status",
        type: "string",
      },
    ],
    name: "bookingLog",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_rider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_estimateFare",
        type: "uint256",
      },
    ],
    name: "checkifSufficientCoins",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_driver",
        type: "address",
      },
    ],
    name: "checkifSufficientCollat",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "coins",
    outputs: [
      {
        internalType: "contract RideToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_rider",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "_driver",
        type: "address",
      },
    ],
    name: "collectDisputeAmount",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_rider",
        type: "address",
      },
      {
        internalType: "address",
        name: "_driver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_riderVote",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "_driverVote",
        type: "uint256",
      },
    ],
    name: "disputeResult",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_user",
        type: "address",
      },
    ],
    name: "getBalances",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getContractWorth",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_driver",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "giveCollatToDriver",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_buyer",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "_amount",
        type: "uint256",
      },
    ],
    name: "mintRideCoins",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "bookingID",
        type: "string",
      },
      {
        internalType: "string",
        name: "distance",
        type: "string",
      },
      {
        internalType: "string",
        name: "startTime",
        type: "string",
      },
      {
        internalType: "string",
        name: "endTime",
        type: "string",
      },
      {
        internalType: "string",
        name: "total",
        type: "string",
      },
      {
        internalType: "string",
        name: "fuelCost",
        type: "string",
      },
      {
        internalType: "string",
        name: "waitTimeCostPerMin",
        type: "string",
      },
      {
        internalType: "string",
        name: "disputeCost",
        type: "string",
      },
      {
        internalType: "string",
        name: "waitTimeCost",
        type: "string",
      },
      {
        internalType: "string",
        name: "milesCost",
        type: "string",
      },
    ],
    name: "tripLog",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "watcher",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50600280546001600160a01b03199081163390811790925560008054821673d4e945c1a8ebcbcb9b3411fd4ece1da9fe5713651781556001805490921690921790556006556110c8806100646000396000f3fe6080604052600436106100be5760003560e01c8063937b57221161006e578063c84aae171161004b578063c84aae1714610214578063d6b7486514610258578063d730b2111461027857005b8063937b5722146101b457806396201f08146101d4578063b6cceb20146101f457005b806311d0804e1161009c57806311d0804e146101275780632036996a1461015c57806322fcefbe1461017c57005b806274ff3b146100c75780630a7d1356146100e75780630c4ee8771461010757005b366100c557005b005b3480156100d357600080fd5b506100c56100e2366004610aea565b61028d565b3480156100f357600080fd5b506100c5610102366004610c05565b6102d9565b34801561011357600080fd5b506100c5610122366004610da7565b61032e565b34801561013357600080fd5b50610147610142366004610df4565b6103cf565b60405190151581526020015b60405180910390f35b34801561016857600080fd5b506100c5610177366004610e16565b610407565b34801561018857600080fd5b5060005461019c906001600160a01b031681565b6040516001600160a01b039091168152602001610153565b3480156101c057600080fd5b506101476101cf366004610e16565b61060b565b3480156101e057600080fd5b506100c56101ef366004610e16565b61063c565b34801561020057600080fd5b506100c561020f366004610e40565b61088e565b34801561022057600080fd5b5061024a61022f366004610df4565b6001600160a01b031660009081526004602052604090205490565b604051908152602001610153565b34801561026457600080fd5b5060015461019c906001600160a01b031681565b34801561028457600080fd5b5061024a6109f6565b7f442a0e0ea9ebfd78b1ae4d183853cc14ff3485ffbb061ae9f7febf6fcaed5270878787878787876040516102c89796959493929190610ec9565b60405180910390a150505050505050565b7fb308dbd06ae2c852200f808eb2cda1454712eda67d216a2249e038a35e1d7d958a8a8a8a8a8a8a8a8a8a60405161031a9a99989796959493929190610f60565b60405180910390a150505050505050505050565b80821115610381576103408380611051565b6001600160a01b0386166000908152600460205260409020546103639190611051565b6001600160a01b0386166000908152600460205260409020556103c8565b61038b8380611051565b6001600160a01b0385166000908152600460205260409020546103ae9190611051565b6001600160a01b0385166000908152600460205260409020555b5050505050565b6003546001600160a01b0382166000908152600460205260408120549091116103fa57506001919050565b506000919050565b919050565b6002546001600160a01b031633146104535760405162461bcd60e51b815260206004820152600a6024820152692737ba1027bbb732b91760b11b60448201526064015b60405180910390fd5b6001600160a01b0382166000908152600560205260408120541561048c57506001600160a01b0382166000908152600560205260409020545b6104968183611069565b6001600160a01b03841660009081526004602052604090205490925082111561050d5760405162461bcd60e51b8152602060048201526024808201527f496e73756666696369656e7420616d6f756e742068656c6420696e2062616c616044820152633731b29760e11b606482015260840161044a565b6001600160a01b038316600090815260046020526040902054610531908390611069565b6000546040516323b872dd60e01b81523060048201526001600160a01b038681166024830152604482018490529294509116906323b872dd90606401602060405180830381600087803b15801561058757600080fd5b505af115801561059b573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105bf9190611080565b506001600160a01b038316600090815260046020526040812080548492906105e8908490611069565b9250508190555081600660008282546106019190611069565b9091555050505050565b6001600160a01b038216600090815260046020526040812054821161063257506001610636565b5060005b92915050565b6002546001600160a01b031633146106835760405162461bcd60e51b815260206004820152600a6024820152692737ba1027bbb732b91760b11b604482015260640161044a565b6001600160a01b038216600090815260056020526040812054156106bc57506001600160a01b0382166000908152600560205260409020545b6106c68183611069565b6000546040516340c10f1960e01b81526001600160a01b038681166004830152602482018490529294509116906340c10f1990604401602060405180830381600087803b15801561071657600080fd5b505af115801561072a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061074e91906110a2565b5060005460405163095ea7b360e01b8152306004820152602481018490526001600160a01b039091169063095ea7b390604401602060405180830381600087803b15801561079b57600080fd5b505af11580156107af573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107d39190611080565b506000546040516323b872dd60e01b81526001600160a01b03858116600483015230602483015260448201859052909116906323b872dd90606401602060405180830381600087803b15801561082857600080fd5b505af115801561083c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108609190611080565b506001600160a01b038316600090815260046020526040812083905560068054849290610601908490611051565b6001600160a01b0381166000908152600460205260409020548211156108f85781600660008282546108c09190611069565b90915550506001600160a01b038116600090815260056020526040812080548492906108ed908490611051565b909155506109369050565b6001600160a01b03811660009081526004602052604090205461091c908390611069565b6001600160a01b0382166000908152600460205260409020555b6001600160a01b03831660009081526004602052604090205482101561099e5760405162461bcd60e51b815260206004820152601c60248201527f557365722068617320696e73756666696369656e742066756e64732e00000000604482015260640161044a565b6001600160a01b0383166000908152600460205260409020546109c2908390611069565b6001600160a01b0384166000908152600460205260409020556109e58280611051565b600660008282546106019190611051565b6002546000906001600160a01b03163314610a405760405162461bcd60e51b815260206004820152600a6024820152692737ba1027bbb732b91760b11b604482015260640161044a565b5060065490565b634e487b7160e01b600052604160045260246000fd5b600082601f830112610a6e57600080fd5b813567ffffffffffffffff80821115610a8957610a89610a47565b604051601f8301601f19908116603f01168101908282118183101715610ab157610ab1610a47565b81604052838152866020858801011115610aca57600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080600080600080600060e0888a031215610b0557600080fd5b873567ffffffffffffffff80821115610b1d57600080fd5b610b298b838c01610a5d565b985060208a0135915080821115610b3f57600080fd5b610b4b8b838c01610a5d565b975060408a0135915080821115610b6157600080fd5b610b6d8b838c01610a5d565b965060608a0135915080821115610b8357600080fd5b610b8f8b838c01610a5d565b955060808a0135915080821115610ba557600080fd5b610bb18b838c01610a5d565b945060a08a0135915080821115610bc757600080fd5b610bd38b838c01610a5d565b935060c08a0135915080821115610be957600080fd5b50610bf68a828b01610a5d565b91505092959891949750929550565b6000806000806000806000806000806101408b8d031215610c2557600080fd5b8a3567ffffffffffffffff80821115610c3d57600080fd5b610c498e838f01610a5d565b9b5060208d0135915080821115610c5f57600080fd5b610c6b8e838f01610a5d565b9a5060408d0135915080821115610c8157600080fd5b610c8d8e838f01610a5d565b995060608d0135915080821115610ca357600080fd5b610caf8e838f01610a5d565b985060808d0135915080821115610cc557600080fd5b610cd18e838f01610a5d565b975060a08d0135915080821115610ce757600080fd5b610cf38e838f01610a5d565b965060c08d0135915080821115610d0957600080fd5b610d158e838f01610a5d565b955060e08d0135915080821115610d2b57600080fd5b610d378e838f01610a5d565b94506101008d0135915080821115610d4e57600080fd5b610d5a8e838f01610a5d565b93506101208d0135915080821115610d7157600080fd5b50610d7e8d828e01610a5d565b9150509295989b9194979a5092959850565b80356001600160a01b038116811461040257600080fd5b600080600080600060a08688031215610dbf57600080fd5b610dc886610d90565b9450610dd660208701610d90565b94979496505050506040830135926060810135926080909101359150565b600060208284031215610e0657600080fd5b610e0f82610d90565b9392505050565b60008060408385031215610e2957600080fd5b610e3283610d90565b946020939093013593505050565b600080600060608486031215610e5557600080fd5b610e5e84610d90565b925060208401359150610e7360408501610d90565b90509250925092565b6000815180845260005b81811015610ea257602081850181015186830182015201610e86565b81811115610eb4576000602083870101525b50601f01601f19169290920160200192915050565b60e081526000610edc60e083018a610e7c565b8281036020840152610eee818a610e7c565b90508281036040840152610f028189610e7c565b90508281036060840152610f168188610e7c565b90508281036080840152610f2a8187610e7c565b905082810360a0840152610f3e8186610e7c565b905082810360c0840152610f528185610e7c565b9a9950505050505050505050565b6000610140808352610f748184018e610e7c565b90508281036020840152610f88818d610e7c565b90508281036040840152610f9c818c610e7c565b90508281036060840152610fb0818b610e7c565b90508281036080840152610fc4818a610e7c565b905082810360a0840152610fd88189610e7c565b905082810360c0840152610fec8188610e7c565b905082810360e08401526110008187610e7c565b90508281036101008401526110158186610e7c565b905082810361012084015261102a8185610e7c565b9d9c50505050505050505050505050565b634e487b7160e01b600052601160045260246000fd5b600082198211156110645761106461103b565b500190565b60008282101561107b5761107b61103b565b500390565b60006020828403121561109257600080fd5b81518015158114610e0f57600080fd5b6000602082840312156110b457600080fd5b505191905056fea164736f6c6343000809000a";

type ControllerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ControllerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Controller__factory extends ContractFactory {
  constructor(...args: ControllerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Controller> {
    return super.deploy(overrides || {}) as Promise<Controller>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Controller {
    return super.attach(address) as Controller;
  }
  connect(signer: Signer): Controller__factory {
    return super.connect(signer) as Controller__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ControllerInterface {
    return new utils.Interface(_abi) as ControllerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Controller {
    return new Contract(address, _abi, signerOrProvider) as Controller;
  }
}
