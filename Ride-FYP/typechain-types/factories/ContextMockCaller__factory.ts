/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ContextMockCaller,
  ContextMockCallerInterface,
} from "../ContextMockCaller";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract ContextMock",
        name: "context",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "integerValue",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "stringValue",
        type: "string",
      },
    ],
    name: "callData",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract ContextMock",
        name: "context",
        type: "address",
      },
    ],
    name: "callSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102cd806100206000396000f3fe608060405234801561001057600080fd5b50600436106100355760003560e01c80628604591461003a5780633207ad961461004f575b600080fd5b61004d610048366004610176565b610062565b005b61004d61005d366004610241565b6100d4565b604051631bb5f93160e11b815273ffffffffffffffffffffffffffffffffffffffff84169063376bf2629061009d9085908590600401610263565b600060405180830381600087803b1580156100b757600080fd5b505af11580156100cb573d6000803e3d6000fd5b50505050505050565b8073ffffffffffffffffffffffffffffffffffffffff1663d737d0c76040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561011c57600080fd5b505af1158015610130573d6000803e3d6000fd5b5050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461015b57600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561018b57600080fd5b61019484610137565b925060208401359150604084013567ffffffffffffffff808211156101b857600080fd5b818601915086601f8301126101cc57600080fd5b8135818111156101de576101de610160565b604051601f8201601f19908116603f0116810190838211818310171561020657610206610160565b8160405282815289602084870101111561021f57600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b60006020828403121561025357600080fd5b61025c82610137565b9392505050565b82815260006020604081840152835180604085015260005b818110156102975785810183015185820160600152820161027b565b818111156102a9576000606083870101525b50601f01601f19169290920160600194935050505056fea164736f6c6343000809000a";

type ContextMockCallerConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ContextMockCallerConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ContextMockCaller__factory extends ContractFactory {
  constructor(...args: ContextMockCallerConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContextMockCaller> {
    return super.deploy(overrides || {}) as Promise<ContextMockCaller>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ContextMockCaller {
    return super.attach(address) as ContextMockCaller;
  }
  connect(signer: Signer): ContextMockCaller__factory {
    return super.connect(signer) as ContextMockCaller__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ContextMockCallerInterface {
    return new utils.Interface(_abi) as ContextMockCallerInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ContextMockCaller {
    return new Contract(address, _abi, signerOrProvider) as ContextMockCaller;
  }
}
