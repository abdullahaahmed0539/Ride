/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721PausableMock,
  ERC721PausableMockInterface,
} from "../ERC721PausableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001bf838038062001bf88339810160408190526200003491620001ec565b8151829082906200004d90600090602085019062000079565b5080516200006390600190602084019062000079565b50506006805460ff191690555062000293915050565b828054620000879062000256565b90600052602060002090601f016020900481019282620000ab5760008555620000f6565b82601f10620000c657805160ff1916838001178555620000f6565b82800160010185558215620000f6579182015b82811115620000f6578251825591602001919060010190620000d9565b506200010492915062000108565b5090565b5b8082111562000104576000815560010162000109565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200014757600080fd5b81516001600160401b03808211156200016457620001646200011f565b604051601f8301601f19908116603f011681019082821181831017156200018f576200018f6200011f565b81604052838152602092508683858801011115620001ac57600080fd5b600091505b83821015620001d05785820183015181830184015290820190620001b1565b83821115620001e25760008385830101525b9695505050505050565b600080604083850312156200020057600080fd5b82516001600160401b03808211156200021857600080fd5b620002268683870162000135565b935060208501519150808211156200023d57600080fd5b506200024c8582860162000135565b9150509250929050565b600181811c908216806200026b57607f821691505b602082108114156200028d57634e487b7160e01b600052602260045260246000fd5b50919050565b61195580620002a36000396000f3fe608060405234801561001057600080fd5b50600436106101775760003560e01c80635c975abb116100d857806395d89b411161008c578063b88d4fde11610066578063b88d4fde146102e8578063c87b56dd146102fb578063e985e9c51461030e57600080fd5b806395d89b41146102ba578063a1448194146102c2578063a22cb465146102d557600080fd5b806370a08231116100bd57806370a082311461027e5780638456cb591461029f5780638832e6e3146102a757600080fd5b80635c975abb146102605780636352211e1461026b57600080fd5b80633f4ba83a1161012f57806342842e0e1161011457806342842e0e1461022757806342966c681461023a5780634f558e791461024d57600080fd5b80633f4ba83a1461020c57806340c10f191461021457600080fd5b8063081812fc11610160578063081812fc146101b9578063095ea7b3146101e457806323b872dd146101f957600080fd5b806301ffc9a71461017c57806306fdde03146101a4575b600080fd5b61018f61018a3660046114c2565b61034a565b60405190151581526020015b60405180910390f35b6101ac61039c565b60405161019b9190611537565b6101cc6101c736600461154a565b61042e565b6040516001600160a01b03909116815260200161019b565b6101f76101f236600461157f565b6104c8565b005b6101f76102073660046115a9565b6105de565b6101f7610665565b6101f761022236600461157f565b61066f565b6101f76102353660046115a9565b61067d565b6101f761024836600461154a565b610698565b61018f61025b36600461154a565b6106a4565b60065460ff1661018f565b6101cc61027936600461154a565b6106c3565b61029161028c3660046115e5565b61074e565b60405190815260200161019b565b6101f76107e8565b6101f76102b53660046116a3565b6107f0565b6101ac6107fb565b6101f76102d036600461157f565b61080a565b6101f76102e33660046116fa565b610814565b6101f76102f6366004611736565b61081f565b6101ac61030936600461154a565b6108ad565b61018f61031c36600461179e565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061037b57506001600160e01b03198216635b5e139f60e01b145b8061039657506301ffc9a760e01b6001600160e01b03198316145b92915050565b6060600080546103ab906117d1565b80601f01602080910402602001604051908101604052809291908181526020018280546103d7906117d1565b80156104245780601f106103f957610100808354040283529160200191610424565b820191906000526020600020905b81548152906001019060200180831161040757829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104ac5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006104d3826106c3565b9050806001600160a01b0316836001600160a01b031614156105415760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b60648201526084016104a3565b336001600160a01b038216148061055d575061055d813361031c565b6105cf5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c000000000000000060648201526084016104a3565b6105d983836109a3565b505050565b6105e83382610a11565b61065a5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104a3565b6105d9838383610b08565b61066d610cc7565b565b6106798282610d63565b5050565b6105d98383836040518060200160405280600081525061081f565b6106a181610eb1565b50565b6000818152600260205260408120546001600160a01b03161515610396565b6000818152600260205260408120546001600160a01b0316806103965760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e000000000000000000000000000000000000000000000060648201526084016104a3565b60006001600160a01b0382166107cc5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f20616464726573730000000000000000000000000000000000000000000060648201526084016104a3565b506001600160a01b031660009081526003602052604090205490565b61066d610f58565b6105d9838383610fe0565b6060600180546103ab906117d1565b610679828261105e565b610679338383611078565b6108293383610a11565b61089b5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656400000000000000000000000000000060648201526084016104a3565b6108a784848484611147565b50505050565b6000818152600260205260409020546060906001600160a01b031661093a5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e000000000000000000000000000000000060648201526084016104a3565b600061095160408051602081019091526000815290565b90506000815111610971576040518060200160405280600081525061099c565b8061097b846111c5565b60405160200161098c92919061180c565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109d8826106c3565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610a8a5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084016104a3565b6000610a95836106c3565b9050806001600160a01b0316846001600160a01b03161480610ad05750836001600160a01b0316610ac58461042e565b6001600160a01b0316145b80610b0057506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b1b826106c3565b6001600160a01b031614610b975760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e657200000000000000000000000000000000000000000000000000000060648201526084016104a3565b6001600160a01b038216610bf95760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b60648201526084016104a3565b610c048383836112db565b610c0f6000826109a3565b6001600160a01b0383166000908152600360205260408120805460019290610c38908490611851565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c66908490611868565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60065460ff16610d195760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016104a3565b6006805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038216610db95760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f206164647265737360448201526064016104a3565b6000818152600260205260409020546001600160a01b031615610e1e5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e7465640000000060448201526064016104a3565b610e2a600083836112db565b6001600160a01b0382166000908152600360205260408120805460019290610e53908490611868565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610ebc826106c3565b9050610eca816000846112db565b610ed56000836109a3565b6001600160a01b0381166000908152600360205260408120805460019290610efe908490611851565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b60065460ff1615610fab5760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016104a3565b6006805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610d463390565b610fea8383610d63565b610ff76000848484611354565b6105d95760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104a3565b610679828260405180602001604052806000815250610fe0565b816001600160a01b0316836001600160a01b031614156110da5760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c65720000000000000060448201526064016104a3565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611152848484610b08565b61115e84848484611354565b6108a75760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104a3565b6060816111e95750506040805180820190915260018152600360fc1b602082015290565b8160005b811561121357806111fd81611880565b915061120c9050600a836118b1565b91506111ed565b60008167ffffffffffffffff81111561122e5761122e611600565b6040519080825280601f01601f191660200182016040528015611258576020820181803683370190505b5090505b8415610b005761126d600183611851565b915061127a600a866118c5565b611285906030611868565b60f81b81838151811061129a5761129a6118d9565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506112d4600a866118b1565b945061125c565b60065460ff16156105d95760405162461bcd60e51b815260206004820152602b60248201527f4552433732315061757361626c653a20746f6b656e207472616e73666572207760448201527f68696c652070617573656400000000000000000000000000000000000000000060648201526084016104a3565b60006001600160a01b0384163b156114a157604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906113989033908990889088906004016118ef565b602060405180830381600087803b1580156113b257600080fd5b505af19250505080156113e2575060408051601f3d908101601f191682019092526113df9181019061192b565b60015b611487573d808015611410576040519150601f19603f3d011682016040523d82523d6000602084013e611415565b606091505b50805161147f5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b60648201526084016104a3565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b00565b506001949350505050565b6001600160e01b0319811681146106a157600080fd5b6000602082840312156114d457600080fd5b813561099c816114ac565b60005b838110156114fa5781810151838201526020016114e2565b838111156108a75750506000910152565b600081518084526115238160208601602086016114df565b601f01601f19169290920160200192915050565b60208152600061099c602083018461150b565b60006020828403121561155c57600080fd5b5035919050565b80356001600160a01b038116811461157a57600080fd5b919050565b6000806040838503121561159257600080fd5b61159b83611563565b946020939093013593505050565b6000806000606084860312156115be57600080fd5b6115c784611563565b92506115d560208501611563565b9150604084013590509250925092565b6000602082840312156115f757600080fd5b61099c82611563565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261162757600080fd5b813567ffffffffffffffff8082111561164257611642611600565b604051601f8301601f19908116603f0116810190828211818310171561166a5761166a611600565b8160405283815286602085880101111561168357600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000606084860312156116b857600080fd5b6116c184611563565b925060208401359150604084013567ffffffffffffffff8111156116e457600080fd5b6116f086828701611616565b9150509250925092565b6000806040838503121561170d57600080fd5b61171683611563565b91506020830135801515811461172b57600080fd5b809150509250929050565b6000806000806080858703121561174c57600080fd5b61175585611563565b935061176360208601611563565b925060408501359150606085013567ffffffffffffffff81111561178657600080fd5b61179287828801611616565b91505092959194509250565b600080604083850312156117b157600080fd5b6117ba83611563565b91506117c860208401611563565b90509250929050565b600181811c908216806117e557607f821691505b6020821081141561180657634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161181e8184602088016114df565b8351908301906118328183602088016114df565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156118635761186361183b565b500390565b6000821982111561187b5761187b61183b565b500190565b60006000198214156118945761189461183b565b5060010190565b634e487b7160e01b600052601260045260246000fd5b6000826118c0576118c061189b565b500490565b6000826118d4576118d461189b565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b03808716835280861660208401525083604083015260806060830152611921608083018461150b565b9695505050505050565b60006020828403121561193d57600080fd5b815161099c816114ac56fea164736f6c6343000809000a";

type ERC721PausableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721PausableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721PausableMock__factory extends ContractFactory {
  constructor(...args: ERC721PausableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721PausableMock> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<ERC721PausableMock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): ERC721PausableMock {
    return super.attach(address) as ERC721PausableMock;
  }
  connect(signer: Signer): ERC721PausableMock__factory {
    return super.connect(signer) as ERC721PausableMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721PausableMockInterface {
    return new utils.Interface(_abi) as ERC721PausableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721PausableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721PausableMock;
  }
}
