/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20ReturnFalseMock,
  ERC20ReturnFalseMockInterface,
} from "../ERC20ReturnFalseMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506101a6806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c8063095ea7b31461005157806323b872dd14610080578063a9059cbb14610051578063dd62ed3e1461009c575b600080fd5b61006b61005f366004610100565b50506000600181905590565b60405190151581526020015b60405180910390f35b61006b61008e36600461012a565b600060018190559392505050565b6100af6100aa366004610166565b6100bd565b604051908152602001610077565b60006001546000146100ce57600080fd5b50600092915050565b803573ffffffffffffffffffffffffffffffffffffffff811681146100fb57600080fd5b919050565b6000806040838503121561011357600080fd5b61011c836100d7565b946020939093013593505050565b60008060006060848603121561013f57600080fd5b610148846100d7565b9250610156602085016100d7565b9150604084013590509250925092565b6000806040838503121561017957600080fd5b610182836100d7565b9150610190602084016100d7565b9050925092905056fea164736f6c6343000809000a";

type ERC20ReturnFalseMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ReturnFalseMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20ReturnFalseMock__factory extends ContractFactory {
  constructor(...args: ERC20ReturnFalseMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20ReturnFalseMock> {
    return super.deploy(overrides || {}) as Promise<ERC20ReturnFalseMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20ReturnFalseMock {
    return super.attach(address) as ERC20ReturnFalseMock;
  }
  connect(signer: Signer): ERC20ReturnFalseMock__factory {
    return super.connect(signer) as ERC20ReturnFalseMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ReturnFalseMockInterface {
    return new utils.Interface(_abi) as ERC20ReturnFalseMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20ReturnFalseMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC20ReturnFalseMock;
  }
}
