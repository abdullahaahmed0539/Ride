/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC165MissingData,
  ERC165MissingDataInterface,
} from "../ERC165MissingData";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060918061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806301ffc9a714602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b81357fffffffff0000000000000000000000000000000000000000000000000000000081168114607d57600080fd5b939250505056fea164736f6c6343000809000a";

type ERC165MissingDataConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC165MissingDataConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC165MissingData__factory extends ContractFactory {
  constructor(...args: ERC165MissingDataConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC165MissingData> {
    return super.deploy(overrides || {}) as Promise<ERC165MissingData>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC165MissingData {
    return super.attach(address) as ERC165MissingData;
  }
  connect(signer: Signer): ERC165MissingData__factory {
    return super.connect(signer) as ERC165MissingData__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC165MissingDataInterface {
    return new utils.Interface(_abi) as ERC165MissingDataInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC165MissingData {
    return new Contract(address, _abi, signerOrProvider) as ERC165MissingData;
  }
}
