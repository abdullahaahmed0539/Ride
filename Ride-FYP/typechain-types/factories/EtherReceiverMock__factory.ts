/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  EtherReceiverMock,
  EtherReceiverMockInterface,
} from "../EtherReceiverMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "bool",
        name: "acceptEther",
        type: "bool",
      },
    ],
    name: "setAcceptEther",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060978061001f6000396000f3fe60806040526004361060205760003560e01c80634fea120c14603957600080fd5b3660345760005460ff16603257600080fd5b005b600080fd5b348015604457600080fd5b50603260503660046063565b6000805460ff1916911515919091179055565b600060208284031215607457600080fd5b81358015158114608357600080fd5b939250505056fea164736f6c6343000809000a";

type EtherReceiverMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: EtherReceiverMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class EtherReceiverMock__factory extends ContractFactory {
  constructor(...args: EtherReceiverMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<EtherReceiverMock> {
    return super.deploy(overrides || {}) as Promise<EtherReceiverMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): EtherReceiverMock {
    return super.attach(address) as EtherReceiverMock;
  }
  connect(signer: Signer): EtherReceiverMock__factory {
    return super.connect(signer) as EtherReceiverMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): EtherReceiverMockInterface {
    return new utils.Interface(_abi) as EtherReceiverMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): EtherReceiverMock {
    return new Contract(address, _abi, signerOrProvider) as EtherReceiverMock;
  }
}
