/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC721BurnableMock,
  ERC721BurnableMockInterface,
} from "../ERC721BurnableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "exists",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeMint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b5060405162001a3b38038062001a3b8339810160408190526200003491620001e1565b8151829082906200004d9060009060208501906200006e565b508051620000639060019060208401906200006e565b505050505062000288565b8280546200007c906200024b565b90600052602060002090601f016020900481019282620000a05760008555620000eb565b82601f10620000bb57805160ff1916838001178555620000eb565b82800160010185558215620000eb579182015b82811115620000eb578251825591602001919060010190620000ce565b50620000f9929150620000fd565b5090565b5b80821115620000f95760008155600101620000fe565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200013c57600080fd5b81516001600160401b038082111562000159576200015962000114565b604051601f8301601f19908116603f0116810190828211818310171562000184576200018462000114565b81604052838152602092508683858801011115620001a157600080fd5b600091505b83821015620001c55785820183015181830184015290820190620001a6565b83821115620001d75760008385830101525b9695505050505050565b60008060408385031215620001f557600080fd5b82516001600160401b03808211156200020d57600080fd5b6200021b868387016200012a565b935060208501519150808211156200023257600080fd5b5062000241858286016200012a565b9150509250929050565b600181811c908216806200026057607f821691505b602082108114156200028257634e487b7160e01b600052602260045260246000fd5b50919050565b6117a380620002986000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80636352211e116100b2578063a144819411610081578063b88d4fde11610066578063b88d4fde1461028c578063c87b56dd1461029f578063e985e9c5146102b257600080fd5b8063a144819414610266578063a22cb4651461027957600080fd5b80636352211e1461021757806370a082311461022a5780638832e6e31461024b57806395d89b411461025e57600080fd5b806323b872dd1161010957806342842e0e116100ee57806342842e0e146101de57806342966c68146101f15780634f558e791461020457600080fd5b806323b872dd146101b857806340c10f19146101cb57600080fd5b806301ffc9a71461013b57806306fdde0314610163578063081812fc14610178578063095ea7b3146101a3575b600080fd5b61014e610149366004611310565b6102ee565b60405190151581526020015b60405180910390f35b61016b610340565b60405161015a9190611385565b61018b610186366004611398565b6103d2565b6040516001600160a01b03909116815260200161015a565b6101b66101b13660046113cd565b61046c565b005b6101b66101c63660046113f7565b610582565b6101b66101d93660046113cd565b61060a565b6101b66101ec3660046113f7565b610618565b6101b66101ff366004611398565b610633565b61014e610212366004611398565b6106ba565b61018b610225366004611398565b6106d9565b61023d610238366004611433565b610764565b60405190815260200161015a565b6101b66102593660046114f1565b6107fe565b61016b610809565b6101b66102743660046113cd565b610818565b6101b6610287366004611548565b610822565b6101b661029a366004611584565b61082d565b61016b6102ad366004611398565b6108bb565b61014e6102c03660046115ec565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b031982166380ac58cd60e01b148061031f57506001600160e01b03198216635b5e139f60e01b145b8061033a57506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461034f9061161f565b80601f016020809104026020016040519081016040528092919081815260200182805461037b9061161f565b80156103c85780601f1061039d576101008083540402835291602001916103c8565b820191906000526020600020905b8154815290600101906020018083116103ab57829003601f168201915b5050505050905090565b6000818152600260205260408120546001600160a01b03166104505760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b6000610477826106d9565b9050806001600160a01b0316836001600160a01b031614156104e55760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610447565b336001600160a01b0382161480610501575061050181336102c0565b6105735760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610447565b61057d83836109b1565b505050565b61058d335b82610a1f565b6105ff5760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610447565b61057d838383610b16565b6106148282610cca565b5050565b61057d8383836040518060200160405280600081525061082d565b61063c33610587565b6106ae5760405162461bcd60e51b815260206004820152603060248201527f4552433732314275726e61626c653a2063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f766564000000000000000000000000000000006064820152608401610447565b6106b781610e0c565b50565b6000818152600260205260408120546001600160a01b0316151561033a565b6000818152600260205260408120546001600160a01b03168061033a5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201527f656e7420746f6b656e00000000000000000000000000000000000000000000006064820152608401610447565b60006001600160a01b0382166107e25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a6560448201527f726f2061646472657373000000000000000000000000000000000000000000006064820152608401610447565b506001600160a01b031660009081526003602052604090205490565b61057d838383610ea7565b60606001805461034f9061161f565b6106148282610f25565b610614338383610f3f565b6108373383610a1f565b6108a95760405162461bcd60e51b815260206004820152603160248201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f7665640000000000000000000000000000006064820152608401610447565b6108b58484848461100e565b50505050565b6000818152600260205260409020546060906001600160a01b03166109485760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201527f6e6578697374656e7420746f6b656e00000000000000000000000000000000006064820152608401610447565b600061095f60408051602081019091526000815290565b9050600081511161097f57604051806020016040528060008152506109aa565b806109898461108c565b60405160200161099a92919061165a565b6040516020818303038152906040525b9392505050565b600081815260046020526040902080546001600160a01b0319166001600160a01b03841690811790915581906109e6826106d9565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000818152600260205260408120546001600160a01b0316610a985760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610447565b6000610aa3836106d9565b9050806001600160a01b0316846001600160a01b03161480610ade5750836001600160a01b0316610ad3846103d2565b6001600160a01b0316145b80610b0e57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff165b949350505050565b826001600160a01b0316610b29826106d9565b6001600160a01b031614610ba55760405162461bcd60e51b815260206004820152602560248201527f4552433732313a207472616e736665722066726f6d20696e636f72726563742060448201527f6f776e65720000000000000000000000000000000000000000000000000000006064820152608401610447565b6001600160a01b038216610c075760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610447565b610c126000826109b1565b6001600160a01b0383166000908152600360205260408120805460019290610c3b90849061169f565b90915550506001600160a01b0382166000908152600360205260408120805460019290610c699084906116b6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6001600160a01b038216610d205760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610447565b6000818152600260205260409020546001600160a01b031615610d855760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610447565b6001600160a01b0382166000908152600360205260408120805460019290610dae9084906116b6565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000610e17826106d9565b9050610e246000836109b1565b6001600160a01b0381166000908152600360205260408120805460019290610e4d90849061169f565b909155505060008281526002602052604080822080546001600160a01b0319169055518391906001600160a01b038416907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908390a45050565b610eb18383610cca565b610ebe60008484846111a2565b61057d5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610447565b610614828260405180602001604052806000815250610ea7565b816001600160a01b0316836001600160a01b03161415610fa15760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610447565b6001600160a01b03838116600081815260056020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b611019848484610b16565b611025848484846111a2565b6108b55760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610447565b6060816110b05750506040805180820190915260018152600360fc1b602082015290565b8160005b81156110da57806110c4816116ce565b91506110d39050600a836116ff565b91506110b4565b60008167ffffffffffffffff8111156110f5576110f561144e565b6040519080825280601f01601f19166020018201604052801561111f576020820181803683370190505b5090505b8415610b0e5761113460018361169f565b9150611141600a86611713565b61114c9060306116b6565b60f81b81838151811061116157611161611727565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535061119b600a866116ff565b9450611123565b60006001600160a01b0384163b156112ef57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906111e690339089908890889060040161173d565b602060405180830381600087803b15801561120057600080fd5b505af1925050508015611230575060408051601f3d908101601f1916820190925261122d91810190611779565b60015b6112d5573d80801561125e576040519150601f19603f3d011682016040523d82523d6000602084013e611263565b606091505b5080516112cd5760405162461bcd60e51b815260206004820152603260248201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560448201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b6064820152608401610447565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610b0e565b506001949350505050565b6001600160e01b0319811681146106b757600080fd5b60006020828403121561132257600080fd5b81356109aa816112fa565b60005b83811015611348578181015183820152602001611330565b838111156108b55750506000910152565b6000815180845261137181602086016020860161132d565b601f01601f19169290920160200192915050565b6020815260006109aa6020830184611359565b6000602082840312156113aa57600080fd5b5035919050565b80356001600160a01b03811681146113c857600080fd5b919050565b600080604083850312156113e057600080fd5b6113e9836113b1565b946020939093013593505050565b60008060006060848603121561140c57600080fd5b611415846113b1565b9250611423602085016113b1565b9150604084013590509250925092565b60006020828403121561144557600080fd5b6109aa826113b1565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261147557600080fd5b813567ffffffffffffffff808211156114905761149061144e565b604051601f8301601f19908116603f011681019082821181831017156114b8576114b861144e565b816040528381528660208588010111156114d157600080fd5b836020870160208301376000602085830101528094505050505092915050565b60008060006060848603121561150657600080fd5b61150f846113b1565b925060208401359150604084013567ffffffffffffffff81111561153257600080fd5b61153e86828701611464565b9150509250925092565b6000806040838503121561155b57600080fd5b611564836113b1565b91506020830135801515811461157957600080fd5b809150509250929050565b6000806000806080858703121561159a57600080fd5b6115a3856113b1565b93506115b1602086016113b1565b925060408501359150606085013567ffffffffffffffff8111156115d457600080fd5b6115e087828801611464565b91505092959194509250565b600080604083850312156115ff57600080fd5b611608836113b1565b9150611616602084016113b1565b90509250929050565b600181811c9082168061163357607f821691505b6020821081141561165457634e487b7160e01b600052602260045260246000fd5b50919050565b6000835161166c81846020880161132d565b83519083019061168081836020880161132d565b01949350505050565b634e487b7160e01b600052601160045260246000fd5b6000828210156116b1576116b1611689565b500390565b600082198211156116c9576116c9611689565b500190565b60006000198214156116e2576116e2611689565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261170e5761170e6116e9565b500490565b600082611722576117226116e9565b500690565b634e487b7160e01b600052603260045260246000fd5b60006001600160a01b0380871683528086166020840152508360408301526080606083015261176f6080830184611359565b9695505050505050565b60006020828403121561178b57600080fd5b81516109aa816112fa56fea164736f6c6343000809000a";

type ERC721BurnableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC721BurnableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC721BurnableMock__factory extends ContractFactory {
  constructor(...args: ERC721BurnableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721BurnableMock> {
    return super.deploy(
      name,
      symbol,
      overrides || {}
    ) as Promise<ERC721BurnableMock>;
  }
  getDeployTransaction(
    name: string,
    symbol: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(name, symbol, overrides || {});
  }
  attach(address: string): ERC721BurnableMock {
    return super.attach(address) as ERC721BurnableMock;
  }
  connect(signer: Signer): ERC721BurnableMock__factory {
    return super.connect(signer) as ERC721BurnableMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721BurnableMockInterface {
    return new utils.Interface(_abi) as ERC721BurnableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721BurnableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC721BurnableMock;
  }
}
