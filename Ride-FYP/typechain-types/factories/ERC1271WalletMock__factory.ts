/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1271WalletMock,
  ERC1271WalletMockInterface,
} from "../ERC1271WalletMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "originalOwner",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignature",
    outputs: [
      {
        internalType: "bytes4",
        name: "magicValue",
        type: "bytes4",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5060405161093a38038061093a83398101604081905261002f91610167565b61003833610047565b61004181610097565b50610197565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6000546001600160a01b031633146100f65760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b6001600160a01b03811661015b5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016100ed565b61016481610047565b50565b60006020828403121561017957600080fd5b81516001600160a01b038116811461019057600080fd5b9392505050565b610794806101a66000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c80631626ba7e14610051578063715018a61461009a5780638da5cb5b146100a4578063f2fde38b146100bf575b600080fd5b61006461005f366004610667565b6100d2565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b6100a261010e565b005b6000546040516001600160a01b039091168152602001610091565b6100a26100cd366004610722565b610179565b600080546001600160a01b03166100e9848461025b565b6001600160a01b0316146100fe576000610107565b630b135d3f60e11b5b9392505050565b6000546001600160a01b0316331461016d5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e657260448201526064015b60405180910390fd5b610177600061027f565b565b6000546001600160a01b031633146101d35760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610164565b6001600160a01b03811661024f5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610164565b6102588161027f565b50565b600080600061026a85856102e7565b9150915061027781610357565b509392505050565b600080546001600160a01b038381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008082516041141561031e5760208301516040840151606085015160001a61031287828585610512565b94509450505050610350565b825160401415610348576020830151604084015161033d8683836105ff565b935093505050610350565b506000905060025b9250929050565b600081600481111561036b5761036b61074b565b14156103745750565b60018160048111156103885761038861074b565b14156103d65760405162461bcd60e51b815260206004820152601860248201527f45434453413a20696e76616c6964207369676e617475726500000000000000006044820152606401610164565b60028160048111156103ea576103ea61074b565b14156104385760405162461bcd60e51b815260206004820152601f60248201527f45434453413a20696e76616c6964207369676e6174757265206c656e677468006044820152606401610164565b600381600481111561044c5761044c61074b565b14156104a55760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202773272076616c604482015261756560f01b6064820152608401610164565b60048160048111156104b9576104b961074b565b14156102585760405162461bcd60e51b815260206004820152602260248201527f45434453413a20696e76616c6964207369676e6174757265202776272076616c604482015261756560f01b6064820152608401610164565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561054957506000905060036105f6565b8460ff16601b1415801561056157508460ff16601c14155b1561057257506000905060046105f6565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156105c6573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166105ef576000600192509250506105f6565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161063560ff86901c601b610761565b905061064387828885610512565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6000806040838503121561067a57600080fd5b82359150602083013567ffffffffffffffff8082111561069957600080fd5b818501915085601f8301126106ad57600080fd5b8135818111156106bf576106bf610651565b604051601f8201601f19908116603f011681019083821181831017156106e7576106e7610651565b8160405282815288602084870101111561070057600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60006020828403121561073457600080fd5b81356001600160a01b038116811461010757600080fd5b634e487b7160e01b600052602160045260246000fd5b6000821982111561078257634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c6343000809000a";

type ERC1271WalletMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1271WalletMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1271WalletMock__factory extends ContractFactory {
  constructor(...args: ERC1271WalletMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    originalOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1271WalletMock> {
    return super.deploy(
      originalOwner,
      overrides || {}
    ) as Promise<ERC1271WalletMock>;
  }
  getDeployTransaction(
    originalOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(originalOwner, overrides || {});
  }
  attach(address: string): ERC1271WalletMock {
    return super.attach(address) as ERC1271WalletMock;
  }
  connect(signer: Signer): ERC1271WalletMock__factory {
    return super.connect(signer) as ERC1271WalletMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1271WalletMockInterface {
    return new utils.Interface(_abi) as ERC1271WalletMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1271WalletMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1271WalletMock;
  }
}
