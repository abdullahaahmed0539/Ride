/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC1155PausableMock,
  ERC1155PausableMockInterface,
} from "../ERC1155PausableMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "uri",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Paused",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        indexed: false,
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "TransferBatch",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "TransferSingle",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "value",
        type: "string",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "URI",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "Unpaused",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address[]",
        name: "accounts",
        type: "address[]",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
    ],
    name: "balanceOfBatch",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
    ],
    name: "burnBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mint",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "values",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "mintBatch",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "pause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "paused",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256[]",
        name: "ids",
        type: "uint256[]",
      },
      {
        internalType: "uint256[]",
        name: "amounts",
        type: "uint256[]",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeBatchTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "newuri",
        type: "string",
      },
    ],
    name: "setURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "unpause",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "uri",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b506040516200234b3803806200234b833981016040819052620000349162000129565b8080620000418162000054565b50506003805460ff191690555062000242565b8051620000699060029060208401906200006d565b5050565b8280546200007b9062000205565b90600052602060002090601f0160209004810192826200009f5760008555620000ea565b82601f10620000ba57805160ff1916838001178555620000ea565b82800160010185558215620000ea579182015b82811115620000ea578251825591602001919060010190620000cd565b50620000f8929150620000fc565b5090565b5b80821115620000f85760008155600101620000fd565b634e487b7160e01b600052604160045260246000fd5b600060208083850312156200013d57600080fd5b82516001600160401b03808211156200015557600080fd5b818501915085601f8301126200016a57600080fd5b8151818111156200017f576200017f62000113565b604051601f8201601f19908116603f01168101908382118183101715620001aa57620001aa62000113565b816040528281528886848701011115620001c357600080fd5b600093505b82841015620001e75784840186015181850187015292850192620001c8565b82841115620001f95760008684830101525b98975050505050505050565b600181811c908216806200021a57607f821691505b602082108114156200023c57634e487b7160e01b600052602260045260246000fd5b50919050565b6120f980620002526000396000f3fe608060405234801561001057600080fd5b50600436106100ff5760003560e01c80635c975abb11610097578063a22cb46511610066578063a22cb46514610209578063e985e9c51461021c578063f242432a14610258578063f5298aca1461026b57600080fd5b80635c975abb146101d05780636b20c454146101db578063731133e9146101ee5780638456cb591461020157600080fd5b80631f7fdffa116100d35780631f7fdffa146101825780632eb2c2d6146101955780633f4ba83a146101a85780634e1273f4146101b057600080fd5b8062fdd58e1461010457806301ffc9a71461012a57806302fe53051461014d5780630e89341c14610162575b600080fd5b610117610112366004611810565b61027e565b6040519081526020015b60405180910390f35b61013d610138366004611850565b610327565b6040519015158152602001610121565b61016061015b366004611915565b610379565b005b610175610170366004611966565b610385565b60405161012191906119cc565b610160610190366004611a94565b610419565b6101606101a3366004611b2d565b61042b565b6101606104cd565b6101c36101be366004611bd7565b6104d7565b6040516101219190611cdd565b60035460ff1661013d565b6101606101e9366004611cf0565b610615565b6101606101fc366004611d64565b610625565b610160610631565b610160610217366004611db9565b610639565b61013d61022a366004611df5565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205460ff1690565b610160610266366004611e28565b610648565b610160610279366004611e8d565b6106e3565b60006001600160a01b0383166103015760405162461bcd60e51b815260206004820152602b60248201527f455243313135353a2062616c616e636520717565727920666f7220746865207a60448201527f65726f206164647265737300000000000000000000000000000000000000000060648201526084015b60405180910390fd5b506000908152602081815260408083206001600160a01b03949094168352929052205490565b60006001600160e01b03198216636cdb3d1360e11b148061035857506001600160e01b031982166303a24d0760e21b145b8061037357506301ffc9a760e01b6001600160e01b03198316145b92915050565b610382816106ee565b50565b60606002805461039490611ec0565b80601f01602080910402602001604051908101604052809291908181526020018280546103c090611ec0565b801561040d5780601f106103e25761010080835404028352916020019161040d565b820191906000526020600020905b8154815290600101906020018083116103f057829003601f168201915b50505050509050919050565b61042584848484610701565b50505050565b6001600160a01b0385163314806104475750610447853361022a565b6104b95760405162461bcd60e51b815260206004820152603260248201527f455243313135353a207472616e736665722063616c6c6572206973206e6f742060448201527f6f776e6572206e6f7220617070726f766564000000000000000000000000000060648201526084016102f8565b6104c685858585856108d6565b5050505050565b6104d5610b42565b565b606081518351146105505760405162461bcd60e51b815260206004820152602960248201527f455243313135353a206163636f756e747320616e6420696473206c656e67746860448201527f206d69736d61746368000000000000000000000000000000000000000000000060648201526084016102f8565b6000835167ffffffffffffffff81111561056c5761056c611874565b604051908082528060200260200182016040528015610595578160200160208202803683370190505b50905060005b845181101561060d576105e08582815181106105b9576105b9611efb565b60200260200101518583815181106105d3576105d3611efb565b602002602001015161027e565b8282815181106105f2576105f2611efb565b602090810291909101015261060681611f27565b905061059b565b509392505050565b610620838383610bde565b505050565b61042584848484610e25565b6104d5610f35565b610644338383610fbd565b5050565b6001600160a01b0385163314806106645750610664853361022a565b6106d65760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2063616c6c6572206973206e6f74206f776e6572206e6f7260448201527f20617070726f766564000000000000000000000000000000000000000000000060648201526084016102f8565b6104c685858585856110b2565b610620838383611250565b805161064490600290602084019061175b565b6001600160a01b0384166107615760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102f8565b81518351146107c35760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102f8565b336107d3816000878787876113c9565b60005b845181101561086e578381815181106107f1576107f1611efb565b602002602001015160008087848151811061080e5761080e611efb565b602002602001015181526020019081526020016000206000886001600160a01b03166001600160a01b0316815260200190815260200160002060008282546108569190611f42565b9091555081905061086681611f27565b9150506107d6565b50846001600160a01b031660006001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb87876040516108bf929190611f5a565b60405180910390a46104c6816000878787876113d7565b81518351146109385760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102f8565b6001600160a01b03841661099c5760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016102f8565b336109ab8187878787876113c9565b60005b8451811015610ad45760008582815181106109cb576109cb611efb565b6020026020010151905060008583815181106109e9576109e9611efb565b602090810291909101810151600084815280835260408082206001600160a01b038e168352909352919091205490915081811015610a7c5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016102f8565b6000838152602081815260408083206001600160a01b038e8116855292528083208585039055908b16825281208054849290610ab9908490611f42565b9250508190555050505080610acd90611f27565b90506109ae565b50846001600160a01b0316866001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8787604051610b24929190611f5a565b60405180910390a4610b3a8187878787876113d7565b505050505050565b60035460ff16610b945760405162461bcd60e51b815260206004820152601460248201527f5061757361626c653a206e6f742070617573656400000000000000000000000060448201526064016102f8565b6003805460ff191690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b6040516001600160a01b03909116815260200160405180910390a1565b6001600160a01b038316610c405760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016102f8565b8051825114610ca25760405162461bcd60e51b815260206004820152602860248201527f455243313135353a2069647320616e6420616d6f756e7473206c656e677468206044820152670dad2e6dac2e8c6d60c31b60648201526084016102f8565b6000339050610cc5818560008686604051806020016040528060008152506113c9565b60005b8351811015610dc6576000848281518110610ce557610ce5611efb565b602002602001015190506000848381518110610d0357610d03611efb565b602090810291909101810151600084815280835260408082206001600160a01b038c168352909352919091205490915081811015610d8f5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016102f8565b6000928352602083815260408085206001600160a01b038b1686529091529092209103905580610dbe81611f27565b915050610cc8565b5060006001600160a01b0316846001600160a01b0316826001600160a01b03167f4a39dc06d4c0dbc64b70af90fd698a233a518aa5d07e595d983b8c0526c8f7fb8686604051610e17929190611f5a565b60405180910390a450505050565b6001600160a01b038416610e855760405162461bcd60e51b815260206004820152602160248201527f455243313135353a206d696e7420746f20746865207a65726f206164647265736044820152607360f81b60648201526084016102f8565b33610ea581600087610e968861158c565b610e9f8861158c565b876113c9565b6000848152602081815260408083206001600160a01b038916845290915281208054859290610ed5908490611f42565b909155505060408051858152602081018590526001600160a01b0380881692600092918516917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46104c6816000878787876115d7565b60035460ff1615610f885760405162461bcd60e51b815260206004820152601060248201527f5061757361626c653a207061757365640000000000000000000000000000000060448201526064016102f8565b6003805460ff191660011790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258610bc13390565b816001600160a01b0316836001600160a01b031614156110455760405162461bcd60e51b815260206004820152602960248201527f455243313135353a2073657474696e6720617070726f76616c2073746174757360448201527f20666f722073656c66000000000000000000000000000000000000000000000060648201526084016102f8565b6001600160a01b03838116600081815260016020908152604080832094871680845294825291829020805460ff191686151590811790915591519182527f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a3505050565b6001600160a01b0384166111165760405162461bcd60e51b815260206004820152602560248201527f455243313135353a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016102f8565b33611126818787610e968861158c565b6000848152602081815260408083206001600160a01b038a168452909152902054838110156111aa5760405162461bcd60e51b815260206004820152602a60248201527f455243313135353a20696e73756666696369656e742062616c616e636520666f60448201526939103a3930b739b332b960b11b60648201526084016102f8565b6000858152602081815260408083206001600160a01b038b81168552925280832087850390559088168252812080548692906111e7908490611f42565b909155505060408051868152602081018690526001600160a01b03808916928a821692918616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a46112478288888888886115d7565b50505050505050565b6001600160a01b0383166112b25760405162461bcd60e51b815260206004820152602360248201527f455243313135353a206275726e2066726f6d20746865207a65726f206164647260448201526265737360e81b60648201526084016102f8565b336112e1818560006112c38761158c565b6112cc8761158c565b604051806020016040528060008152506113c9565b6000838152602081815260408083206001600160a01b03881684529091529020548281101561135e5760405162461bcd60e51b8152602060048201526024808201527f455243313135353a206275726e20616d6f756e7420657863656564732062616c604482015263616e636560e01b60648201526084016102f8565b6000848152602081815260408083206001600160a01b03898116808652918452828520888703905582518981529384018890529092908616917fc3d58168c5ae7397731d063d5bbf3d657854427343f4c083240f7aacaa2d0f62910160405180910390a45050505050565b610b3a8686868686866116e2565b6001600160a01b0384163b15610b3a5760405163bc197c8160e01b81526001600160a01b0385169063bc197c819061141b9089908990889088908890600401611f88565b602060405180830381600087803b15801561143557600080fd5b505af1925050508015611465575060408051601f3d908101601f1916820190925261146291810190611fe6565b60015b61151b57611471612003565b806308c379a014156114ab575061148661201f565b8061149157506114ad565b8060405162461bcd60e51b81526004016102f891906119cc565b505b60405162461bcd60e51b815260206004820152603460248201527f455243313135353a207472616e7366657220746f206e6f6e204552433131353560448201527f526563656976657220696d706c656d656e74657200000000000000000000000060648201526084016102f8565b6001600160e01b0319811663bc197c8160e01b146112475760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102f8565b604080516001808252818301909252606091600091906020808301908036833701905050905082816000815181106115c6576115c6611efb565b602090810291909101015292915050565b6001600160a01b0384163b15610b3a5760405163f23a6e6160e01b81526001600160a01b0385169063f23a6e619061161b90899089908890889088906004016120a9565b602060405180830381600087803b15801561163557600080fd5b505af1925050508015611665575060408051601f3d908101601f1916820190925261166291810190611fe6565b60015b61167157611471612003565b6001600160e01b0319811663f23a6e6160e01b146112475760405162461bcd60e51b815260206004820152602860248201527f455243313135353a204552433131353552656365697665722072656a656374656044820152676420746f6b656e7360c01b60648201526084016102f8565b60035460ff1615610b3a5760405162461bcd60e51b815260206004820152602c60248201527f455243313135355061757361626c653a20746f6b656e207472616e736665722060448201527f7768696c6520706175736564000000000000000000000000000000000000000060648201526084016102f8565b82805461176790611ec0565b90600052602060002090601f01602090048101928261178957600085556117cf565b82601f106117a257805160ff19168380011785556117cf565b828001600101855582156117cf579182015b828111156117cf5782518255916020019190600101906117b4565b506117db9291506117df565b5090565b5b808211156117db57600081556001016117e0565b80356001600160a01b038116811461180b57600080fd5b919050565b6000806040838503121561182357600080fd5b61182c836117f4565b946020939093013593505050565b6001600160e01b03198116811461038257600080fd5b60006020828403121561186257600080fd5b813561186d8161183a565b9392505050565b634e487b7160e01b600052604160045260246000fd5b601f8201601f1916810167ffffffffffffffff811182821017156118b0576118b0611874565b6040525050565b600067ffffffffffffffff8311156118d1576118d1611874565b6040516118e8601f8501601f19166020018261188a565b8091508381528484840111156118fd57600080fd5b83836020830137600060208583010152509392505050565b60006020828403121561192757600080fd5b813567ffffffffffffffff81111561193e57600080fd5b8201601f8101841361194f57600080fd5b61195e848235602084016118b7565b949350505050565b60006020828403121561197857600080fd5b5035919050565b6000815180845260005b818110156119a557602081850181015186830182015201611989565b818111156119b7576000602083870101525b50601f01601f19169290920160200192915050565b60208152600061186d602083018461197f565b600067ffffffffffffffff8211156119f9576119f9611874565b5060051b60200190565b600082601f830112611a1457600080fd5b81356020611a21826119df565b604051611a2e828261188a565b83815260059390931b8501820192828101915086841115611a4e57600080fd5b8286015b84811015611a695780358352918301918301611a52565b509695505050505050565b600082601f830112611a8557600080fd5b61186d838335602085016118b7565b60008060008060808587031215611aaa57600080fd5b611ab3856117f4565b9350602085013567ffffffffffffffff80821115611ad057600080fd5b611adc88838901611a03565b94506040870135915080821115611af257600080fd5b611afe88838901611a03565b93506060870135915080821115611b1457600080fd5b50611b2187828801611a74565b91505092959194509250565b600080600080600060a08688031215611b4557600080fd5b611b4e866117f4565b9450611b5c602087016117f4565b9350604086013567ffffffffffffffff80821115611b7957600080fd5b611b8589838a01611a03565b94506060880135915080821115611b9b57600080fd5b611ba789838a01611a03565b93506080880135915080821115611bbd57600080fd5b50611bca88828901611a74565b9150509295509295909350565b60008060408385031215611bea57600080fd5b823567ffffffffffffffff80821115611c0257600080fd5b818501915085601f830112611c1657600080fd5b81356020611c23826119df565b604051611c30828261188a565b83815260059390931b8501820192828101915089841115611c5057600080fd5b948201945b83861015611c7557611c66866117f4565b82529482019490820190611c55565b96505086013592505080821115611c8b57600080fd5b50611c9885828601611a03565b9150509250929050565b600081518084526020808501945080840160005b83811015611cd257815187529582019590820190600101611cb6565b509495945050505050565b60208152600061186d6020830184611ca2565b600080600060608486031215611d0557600080fd5b611d0e846117f4565b9250602084013567ffffffffffffffff80821115611d2b57600080fd5b611d3787838801611a03565b93506040860135915080821115611d4d57600080fd5b50611d5a86828701611a03565b9150509250925092565b60008060008060808587031215611d7a57600080fd5b611d83856117f4565b93506020850135925060408501359150606085013567ffffffffffffffff811115611dad57600080fd5b611b2187828801611a74565b60008060408385031215611dcc57600080fd5b611dd5836117f4565b915060208301358015158114611dea57600080fd5b809150509250929050565b60008060408385031215611e0857600080fd5b611e11836117f4565b9150611e1f602084016117f4565b90509250929050565b600080600080600060a08688031215611e4057600080fd5b611e49866117f4565b9450611e57602087016117f4565b93506040860135925060608601359150608086013567ffffffffffffffff811115611e8157600080fd5b611bca88828901611a74565b600080600060608486031215611ea257600080fd5b611eab846117f4565b95602085013595506040909401359392505050565b600181811c90821680611ed457607f821691505b60208210811415611ef557634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601160045260246000fd5b6000600019821415611f3b57611f3b611f11565b5060010190565b60008219821115611f5557611f55611f11565b500190565b604081526000611f6d6040830185611ca2565b8281036020840152611f7f8185611ca2565b95945050505050565b60006001600160a01b03808816835280871660208401525060a06040830152611fb460a0830186611ca2565b8281036060840152611fc68186611ca2565b90508281036080840152611fda818561197f565b98975050505050505050565b600060208284031215611ff857600080fd5b815161186d8161183a565b600060033d111561201c5760046000803e5060005160e01c5b90565b600060443d101561202d5790565b6040516003193d81016004833e81513d67ffffffffffffffff816024840111818411171561205d57505050505090565b82850191508151818111156120755750505050505090565b843d870101602082850101111561208f5750505050505090565b61209e6020828601018761188a565b509095945050505050565b60006001600160a01b03808816835280871660208401525084604083015283606083015260a060808301526120e160a083018461197f565b97965050505050505056fea164736f6c6343000809000a";

type ERC1155PausableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC1155PausableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC1155PausableMock__factory extends ContractFactory {
  constructor(...args: ERC1155PausableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC1155PausableMock> {
    return super.deploy(uri, overrides || {}) as Promise<ERC1155PausableMock>;
  }
  getDeployTransaction(
    uri: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(uri, overrides || {});
  }
  attach(address: string): ERC1155PausableMock {
    return super.attach(address) as ERC1155PausableMock;
  }
  connect(signer: Signer): ERC1155PausableMock__factory {
    return super.connect(signer) as ERC1155PausableMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC1155PausableMockInterface {
    return new utils.Interface(_abi) as ERC1155PausableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC1155PausableMock {
    return new Contract(address, _abi, signerOrProvider) as ERC1155PausableMock;
  }
}
