/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SampleFather, SampleFatherInterface } from "../SampleFather";

const _abi = [
  {
    inputs: [],
    name: "father",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "gramps",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_gramps",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "_father",
        type: "uint256",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "value",
        type: "string",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isHuman",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b50610907806100206000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80638beaf7d7116100505780638beaf7d7146100c0578063f62d1888146100d3578063fa39851f146100e657600080fd5b80631c8aca3b146100775780634a6c9db6146100935780638129fc1c146100b6575b600080fd5b61008060025481565b6040519081526020015b60405180910390f35b6000546100a69062010000900460ff1681565b604051901515815260200161008a565b6100be6100fb565b005b6100be6100ce3660046107e8565b6101c1565b6100be6100e136600461082d565b610286565b6100ee610349565b60405161008a919061086a565b600054610100900460ff166101165760005460ff161561011a565b303b155b6101825760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff161580156101a4576000805461ffff19166101011790555b6101ac6103d7565b80156101be576000805461ff00191690555b50565b600054610100900460ff166101dc5760005460ff16156101e0565b303b155b6102435760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610179565b600054610100900460ff16158015610265576000805461ffff19166101011790555b61026f838361044c565b8015610281576000805461ff00191690555b505050565b600054610100900460ff166102a15760005460ff16156102a5565b303b155b6103085760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608401610179565b600054610100900460ff1615801561032a576000805461ffff19166101011790555b610333826104c9565b8015610345576000805461ff00191690555b5050565b60018054610356906108bf565b80601f0160208091040260200160405190810160405280929190818152602001828054610382906108bf565b80156103cf5780601f106103a4576101008083540402835291602001916103cf565b820191906000526020600020905b8154815290600101906020018083116103b257829003601f168201915b505050505081565b600054610100900460ff166104425760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b61044a610545565b565b600054610100900460ff166104b75760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b6104c0826104c9565b610345816105c3565b600054610100900460ff166105345760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b61053c6103d7565b6101be81610633565b600054610100900460ff166105b05760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b6000805462ff0000191662010000179055565b600054610100900460ff1661062e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b600255565b600054610100900460ff1661069e5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608401610179565b80516103459060019060208401908280546106b8906108bf565b90600052602060002090601f0160209004810192826106da5760008555610720565b82601f106106f357805160ff1916838001178555610720565b82800160010185558215610720579182015b82811115610720578251825591602001919060010190610705565b5061072c929150610730565b5090565b5b8082111561072c5760008155600101610731565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261076c57600080fd5b813567ffffffffffffffff8082111561078757610787610745565b604051601f8301601f19908116603f011681019082821181831017156107af576107af610745565b816040528381528660208588010111156107c857600080fd5b836020870160208301376000602085830101528094505050505092915050565b600080604083850312156107fb57600080fd5b823567ffffffffffffffff81111561081257600080fd5b61081e8582860161075b565b95602094909401359450505050565b60006020828403121561083f57600080fd5b813567ffffffffffffffff81111561085657600080fd5b6108628482850161075b565b949350505050565b600060208083528351808285015260005b818110156108975785810183015185820160400152820161087b565b818111156108a9576000604083870101525b50601f01601f1916929092016040019392505050565b600181811c908216806108d357607f821691505b602082108114156108f457634e487b7160e01b600052602260045260246000fd5b5091905056fea164736f6c6343000809000a";

type SampleFatherConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SampleFatherConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SampleFather__factory extends ContractFactory {
  constructor(...args: SampleFatherConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SampleFather> {
    return super.deploy(overrides || {}) as Promise<SampleFather>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SampleFather {
    return super.attach(address) as SampleFather;
  }
  connect(signer: Signer): SampleFather__factory {
    return super.connect(signer) as SampleFather__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SampleFatherInterface {
    return new utils.Interface(_abi) as SampleFatherInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SampleFather {
    return new Contract(address, _abi, signerOrProvider) as SampleFather;
  }
}
