/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  SignatureCheckerMock,
  SignatureCheckerMockInterface,
} from "../SignatureCheckerMock";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "signer",
        type: "address",
      },
      {
        internalType: "bytes32",
        name: "hash",
        type: "bytes32",
      },
      {
        internalType: "bytes",
        name: "signature",
        type: "bytes",
      },
    ],
    name: "isValidSignatureNow",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061056f806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80636ccea65214610030575b600080fd5b61004361003e36600461039d565b610057565b604051901515815260200160405180910390f35b600061006d6001600160a01b0385168484610077565b90505b9392505050565b600080600061008685856101d8565b9092509050600081600481111561009f5761009f610476565b1480156100bd5750856001600160a01b0316826001600160a01b0316145b156100cd57600192505050610070565b600080876001600160a01b0316631626ba7e60e01b88886040516024016100f59291906104bc565b60408051601f198184030181529181526020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff166001600160e01b031990941693909317909252905161014891906104f6565b600060405180830381855afa9150503d8060008114610183576040519150601f19603f3d011682016040523d82523d6000602084013e610188565b606091505b509150915081801561019b575080516020145b80156101cc57508051630b135d3f60e11b906101c09083016020908101908401610512565b6001600160e01b031916145b98975050505050505050565b60008082516041141561020f5760208301516040840151606085015160001a61020387828585610248565b94509450505050610241565b825160401415610239576020830151604084015161022e868383610335565b935093505050610241565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561027f575060009050600361032c565b8460ff16601b1415801561029757508460ff16601c14155b156102a8575060009050600461032c565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156102fc573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166103255760006001925092505061032c565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83168161036b60ff86901c601b61053c565b905061037987828885610248565b935093505050935093915050565b634e487b7160e01b600052604160045260246000fd5b6000806000606084860312156103b257600080fd5b83356001600160a01b03811681146103c957600080fd5b925060208401359150604084013567ffffffffffffffff808211156103ed57600080fd5b818601915086601f83011261040157600080fd5b81358181111561041357610413610387565b604051601f8201601f19908116603f0116810190838211818310171561043b5761043b610387565b8160405282815289602084870101111561045457600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b634e487b7160e01b600052602160045260246000fd5b60005b838110156104a757818101518382015260200161048f565b838111156104b6576000848401525b50505050565b82815260406020820152600082518060408401526104e181606085016020870161048c565b601f01601f1916919091016060019392505050565b6000825161050881846020870161048c565b9190910192915050565b60006020828403121561052457600080fd5b81516001600160e01b03198116811461007057600080fd5b6000821982111561055d57634e487b7160e01b600052601160045260246000fd5b50019056fea164736f6c6343000809000a";

type SignatureCheckerMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SignatureCheckerMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SignatureCheckerMock__factory extends ContractFactory {
  constructor(...args: SignatureCheckerMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SignatureCheckerMock> {
    return super.deploy(overrides || {}) as Promise<SignatureCheckerMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SignatureCheckerMock {
    return super.attach(address) as SignatureCheckerMock;
  }
  connect(signer: Signer): SignatureCheckerMock__factory {
    return super.connect(signer) as SignatureCheckerMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SignatureCheckerMockInterface {
    return new utils.Interface(_abi) as SignatureCheckerMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SignatureCheckerMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as SignatureCheckerMock;
  }
}
