/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { SafeMathMock, SafeMathMockInterface } from "../SafeMathMock";

const _abi = [
  {
    inputs: [],
    name: "addMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "divMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "divWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doAdd",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doDiv",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doMod",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doMul",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "doSub",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "modMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "modWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "mulMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "subMemoryCheck",
    outputs: [
      {
        internalType: "uint256",
        name: "mem",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "errorMessage",
        type: "string",
      },
    ],
    name: "subWithMessage",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryAdd",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryDiv",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryMod",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "tryMul",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "a",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "b",
        type: "uint256",
      },
    ],
    name: "trySub",
    outputs: [
      {
        internalType: "bool",
        name: "flag",
        type: "bool",
      },
      {
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061080b806100206000396000f3fe608060405234801561001057600080fd5b50600436106101365760003560e01c80639f5cec89116100b2578063dcc721d211610081578063fb24c86011610066578063fb24c86014610261578063fb999ded14610269578063fc0ce5031461027157600080fd5b8063dcc721d21461023b578063fb1191981461024e57600080fd5b80639f5cec89146101fa578063a155bd621461020d578063a29962b114610220578063c460ae041461023357600080fd5b80636f91e802116101095780637e86d25c116100ee5780637e86d25c146101cc578063869f602f146101d4578063884557bf146101e757600080fd5b80636f91e802146101b1578063736ecb18146101b957600080fd5b80633449b5fb1461013b57806338dc0867146101615780636281efa41461018b5780636c7ac6371461019e575b600080fd5b61014e610149366004610606565b610284565b6040519081526020015b60405180910390f35b61017461016f3660046106ca565b610299565b604080519215158352602083019190915201610158565b6101746101993660046106ca565b6102b2565b61014e6101ac3660046106ca565b6102bf565b61014e6102d2565b6101746101c73660046106ca565b610307565b61014e610314565b61014e6101e23660046106ca565b610340565b6101746101f53660046106ca565b61034c565b61014e610208366004610606565b610359565b61014e61021b366004610606565b610366565b61017461022e3660046106ca565b610373565b61014e610380565b61014e6102493660046106ca565b6103ac565b61014e61025c3660046106ca565b6103b8565b61014e6103c4565b61014e6103f0565b61014e61027f3660046106ca565b61041c565b6000610291848484610428565b949350505050565b6000806102a6848461046b565b915091505b9250929050565b6000806102a6848461049b565b60006102cb83836104e1565b9392505050565b604051602060005b818110156102fe576102ed6001806104ed565b506102f781610702565b90506102da565b50506040510390565b6000806102a684846104f9565b604051602060005b818110156102fe5761032f600180610529565b5061033981610702565b905061031c565b60006102cb83836104ed565b6000806102a68484610535565b6000610291848484610550565b600061029184848461057c565b6000806102a684846105b6565b604051602060005b818110156102fe5761039b6001806105d8565b506103a581610702565b9050610388565b60006102cb83836105e4565b60006102cb8383610529565b604051602060005b818110156102fe576103df6001806105e4565b506103e981610702565b90506103cc565b604051602060005b818110156102fe5761040b6001806104e1565b5061041581610702565b90506103f8565b60006102cb83836105d8565b600081836104525760405162461bcd60e51b8152600401610449919061071d565b60405180910390fd5b5082848161046257610462610772565b04949350505050565b6000808261047e575060009050806102ab565b600183858161048f5761048f610772565b06915091509250929050565b600080836104af57506001905060006102ab565b838302838582816104c2576104c2610772565b04146104d55760008092509250506102ab565b60019590945092505050565b60006102cb8284610788565b60006102cb828461079f565b6000808261050c575060009050806102ab565b600183858161051d5761051d610772565b04915091509250929050565b60006102cb82846107b3565b600080838301848110156104d55760008092509250506102ab565b600081848411156105745760405162461bcd60e51b8152600401610449919061071d565b505050900390565b6000818361059d5760405162461bcd60e51b8152600401610449919061071d565b508284816105ad576105ad610772565b06949350505050565b600080838311156105cc575060009050806102ab565b50600193919092039150565b60006102cb82846107d2565b60006102cb82846107e6565b634e487b7160e01b600052604160045260246000fd5b60008060006060848603121561061b57600080fd5b8335925060208401359150604084013567ffffffffffffffff8082111561064157600080fd5b818601915086601f83011261065557600080fd5b813581811115610667576106676105f0565b604051601f8201601f19908116603f0116810190838211818310171561068f5761068f6105f0565b816040528281528960208487010111156106a857600080fd5b8260208601602083013760006020848301015280955050505050509250925092565b600080604083850312156106dd57600080fd5b50508035926020909101359150565b634e487b7160e01b600052601160045260246000fd5b6000600019821415610716576107166106ec565b5060010190565b600060208083528351808285015260005b8181101561074a5785810183015185820160400152820161072e565b8181111561075c576000604083870101525b50601f01601f1916929092016040019392505050565b634e487b7160e01b600052601260045260246000fd5b60008282101561079a5761079a6106ec565b500390565b6000826107ae576107ae610772565b500690565b60008160001904831182151516156107cd576107cd6106ec565b500290565b6000826107e1576107e1610772565b500490565b600082198211156107f9576107f96106ec565b50019056fea164736f6c6343000809000a";

type SafeMathMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SafeMathMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SafeMathMock__factory extends ContractFactory {
  constructor(...args: SafeMathMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<SafeMathMock> {
    return super.deploy(overrides || {}) as Promise<SafeMathMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SafeMathMock {
    return super.attach(address) as SafeMathMock;
  }
  connect(signer: Signer): SafeMathMock__factory {
    return super.connect(signer) as SafeMathMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeMathMockInterface {
    return new utils.Interface(_abi) as SafeMathMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): SafeMathMock {
    return new Contract(address, _abi, signerOrProvider) as SafeMathMock;
  }
}
