/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC777SenderRecipientMock,
  ERC777SenderRecipientMockInterface,
} from "../ERC777SenderRecipientMock";

const _abi = [
  {
    anonymous: false,
    inputs: [],
    name: "BeforeTokenTransfer",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toBalance",
        type: "uint256",
      },
    ],
    name: "TokensReceivedCalled",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
      {
        indexed: false,
        internalType: "address",
        name: "token",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "fromBalance",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "toBalance",
        type: "uint256",
      },
    ],
    name: "TokensToSendCalled",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "contract IERC777",
        name: "token",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "burn",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32",
        name: "interfaceHash",
        type: "bytes32",
      },
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "canImplementInterfaceForAddress",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "recipientFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
    ],
    name: "registerRecipient",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "registerSender",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IERC777",
        name: "token",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "senderFor",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "shouldRevert",
        type: "bool",
      },
    ],
    name: "setShouldRevertReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bool",
        name: "shouldRevert",
        type: "bool",
      },
    ],
    name: "setShouldRevertSend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "tokensReceived",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "userData",
        type: "bytes",
      },
      {
        internalType: "bytes",
        name: "operatorData",
        type: "bytes",
      },
    ],
    name: "tokensToSend",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040526001805462010000600160b01b031916751820a4b7618bde71dce8cdc73aab6c95905fad24000017905534801561003a57600080fd5b50610bc48061004a6000396000f3fe608060405234801561001057600080fd5b50600436106100c85760003560e01c806375ab978211610081578063d2de64741161005b578063d2de64741461019c578063e0eb2180146101af578063e1ecbd30146101c257600080fd5b806375ab97821461014e578063a8badaa514610161578063c97e18fc1461017457600080fd5b80633836ef89116100b25780633836ef891461010757806344d171871461011a5780634e4ae5a51461012d57600080fd5b806223de29146100cd578063249cb3fa146100e2575b600080fd5b6100e06100db3660046107da565b6101d5565b005b6100f56100f036600461088b565b610345565b60405190815260200160405180910390f35b6100e061011536600461095e565b61039d565b6100e06101283660046109ca565b610405565b6100e061013b366004610a23565b6001805460ff1916911515919091179055565b6100e061015c3660046107da565b61046a565b6100e061016f366004610a45565b6105c0565b6100e0610182366004610a23565b600180549115156101000261ff0019909216919091179055565b6100e06101aa366004610a45565b610656565b6100e06101bd366004610a45565b6106b7565b6100e06101d0366004610a45565b610714565b600154610100900460ff16156101ea57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b15801561023457600080fd5b505afa158015610248573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061026c9190610a62565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b1580156102b357600080fd5b505afa1580156102c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102eb9190610a62565b90507f47e915878c47f3ec4d7ff646a2becb229f64fd2abe4d2b5e2bb4275b0cf50d4e8b8b8b8b8b8b8b8b8b8b8b6040516103309b9a99989796959493929190610aa4565b60405180910390a15050505050505050505050565b6000828152602081815260408083206001600160a01b038516845290915281205460ff16610374576000610396565b7fa2ef4600d742022d532d4747cb3547474667d6f13804902513b2ec01c848f4b45b9392505050565b604051634decdde360e11b81526001600160a01b03851690639bd9bbc6906103cd90869086908690600401610b65565b600060405180830381600087803b1580156103e757600080fd5b505af11580156103fb573d6000803e3d6000fd5b5050505050505050565b60405163fe9d930360e01b81526001600160a01b0384169063fe9d9303906104339085908590600401610b96565b600060405180830381600087803b15801561044d57600080fd5b505af1158015610461573d6000803e3d6000fd5b50505050505050565b60015460ff161561047a57600080fd5b6000336040516370a0823160e01b81526001600160a01b038a811660048301529192506000918316906370a082319060240160206040518083038186803b1580156104c457600080fd5b505afa1580156104d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104fc9190610a62565b6040516370a0823160e01b81526001600160a01b038a811660048301529192506000918416906370a082319060240160206040518083038186803b15801561054357600080fd5b505afa158015610557573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061057b9190610a62565b90507faa3e88aca472e90221daf7d3d601abafb62b120319089d7a2c2f63588da855298b8b8b8b8b8b8b8b8b8b8b6040516103309b9a99989796959493929190610aa4565b6001546040516329965a1d60e01b81523060048201527fb281fc8c12954d22544db45de3159a39272895b169a852b314f9cc762e44c53b60248201526001600160a01b03838116604483015262010000909204909116906329965a1d906064015b600060405180830381600087803b15801561063b57600080fd5b505af115801561064f573d6000803e3d6000fd5b5050505050565b6001600160a01b03811660009081527f35caef69825cdb1fbfd221f52a215969ae583b38d7af2e4bc70bda521cf19ba860205260409020805460ff19166001179055306001600160a01b0382168114156106b3576106b381610714565b5050565b6001600160a01b03811660009081527fc94b714a2fa3e3d452ac99626abd60dbecc7b9c2ccb8a6bd41a9ad65fc37988060205260409020805460ff19166001179055306001600160a01b0382168114156106b3576106b3816105c0565b6001546040516329965a1d60e01b81523060048201527f29ddb589b1fb5fc7cf394961c1adf5f8c6454761adf795e67fe149f658abe89560248201526001600160a01b03838116604483015262010000909204909116906329965a1d90606401610621565b6001600160a01b038116811461078e57600080fd5b50565b60008083601f8401126107a357600080fd5b50813567ffffffffffffffff8111156107bb57600080fd5b6020830191508360208285010111156107d357600080fd5b9250929050565b60008060008060008060008060c0898b0312156107f657600080fd5b883561080181610779565b9750602089013561081181610779565b9650604089013561082181610779565b955060608901359450608089013567ffffffffffffffff8082111561084557600080fd5b6108518c838d01610791565b909650945060a08b013591508082111561086a57600080fd5b506108778b828c01610791565b999c989b5096995094979396929594505050565b6000806040838503121561089e57600080fd5b8235915060208301356108b081610779565b809150509250929050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126108e257600080fd5b813567ffffffffffffffff808211156108fd576108fd6108bb565b604051601f8301601f19908116603f01168101908282118183101715610925576109256108bb565b8160405283815286602085880101111561093e57600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000806000806080858703121561097457600080fd5b843561097f81610779565b9350602085013561098f81610779565b925060408501359150606085013567ffffffffffffffff8111156109b257600080fd5b6109be878288016108d1565b91505092959194509250565b6000806000606084860312156109df57600080fd5b83356109ea81610779565b925060208401359150604084013567ffffffffffffffff811115610a0d57600080fd5b610a19868287016108d1565b9150509250925092565b600060208284031215610a3557600080fd5b8135801515811461039657600080fd5b600060208284031215610a5757600080fd5b813561039681610779565b600060208284031215610a7457600080fd5b5051919050565b81835281816020850137506000828201602090810191909152601f909101601f19169091010190565b60006101206001600160a01b03808f168452808e166020850152808d1660408501528b6060850152816080850152610adf8285018b8d610a7b565b915083820360a0850152610af482898b610a7b565b961660c0840152505060e08101929092526101009091015298975050505050505050565b6000815180845260005b81811015610b3e57602081850181015186830182015201610b22565b81811115610b50576000602083870101525b50601f01601f19169290920160200192915050565b6001600160a01b0384168152826020820152606060408201526000610b8d6060830184610b18565b95945050505050565b828152604060208201526000610baf6040830184610b18565b94935050505056fea164736f6c6343000809000a";

type ERC777SenderRecipientMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC777SenderRecipientMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC777SenderRecipientMock__factory extends ContractFactory {
  constructor(...args: ERC777SenderRecipientMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC777SenderRecipientMock> {
    return super.deploy(overrides || {}) as Promise<ERC777SenderRecipientMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC777SenderRecipientMock {
    return super.attach(address) as ERC777SenderRecipientMock;
  }
  connect(signer: Signer): ERC777SenderRecipientMock__factory {
    return super.connect(signer) as ERC777SenderRecipientMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC777SenderRecipientMockInterface {
    return new utils.Interface(_abi) as ERC777SenderRecipientMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC777SenderRecipientMock {
    return new Contract(
      address,
      _abi,
      signerOrProvider
    ) as ERC777SenderRecipientMock;
  }
}
