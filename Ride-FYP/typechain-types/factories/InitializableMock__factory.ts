/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  InitializableMock,
  InitializableMockInterface,
} from "../InitializableMock";

const _abi = [
  {
    inputs: [],
    name: "fail",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializeOnlyInitializing",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "initializeWithX",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializerNested",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "initializerRan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_x",
        type: "uint256",
      },
    ],
    name: "nonInitializable",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "onlyInitializingNested",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "onlyInitializingRan",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "x",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506105b6806100206000396000f3fe6080604052600436106100b05760003560e01c80637cffe97a11610069578063a9cc47181161004e578063a9cc471814610178578063c3b8ef2a1461018d578063e955c9ec146101ad57600080fd5b80637cffe97a146101325780638129fc1c1461016357600080fd5b806310065ed21161009a57806310065ed2146100f357806368449d1b1461010857806376268ae81461011d57600080fd5b806218eaa8146100b55780630c55699c146100ca575b600080fd5b6100c86100c3366004610590565b6101c0565b005b3480156100d657600080fd5b506100e060015481565b6040519081526020015b60405180910390f35b3480156100ff57600080fd5b506100c8610284565b34801561011457600080fd5b506100c8610316565b34801561012957600080fd5b506100c86103d7565b34801561013e57600080fd5b50600054610153906301000000900460ff1681565b60405190151581526020016100ea565b34801561016f57600080fd5b506100c861047f565b34801561018457600080fd5b506100c8610548565b34801561019957600080fd5b506000546101539062010000900460ff1681565b6100c86101bb366004610590565b600155565b600054610100900460ff166101db5760005460ff16156101df565b303b155b6102475760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b60648201526084015b60405180910390fd5b600054610100900460ff16158015610269576000805461ffff19166101011790555b60018290558015610280576000805461ff00191690555b5050565b600054610100900460ff166103015760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161023e565b6000805463ff00000019166301000000179055565b600054610100900460ff166103315760005460ff1615610335565b303b155b6103985760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161023e565b600054610100900460ff161580156103ba576000805461ffff19166101011790555b6103c2610284565b80156103d4576000805461ff00191690555b50565b600054610100900460ff166103f25760005460ff16156103f6565b303b155b6104595760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161023e565b600054610100900460ff1615801561047b576000805461ffff19166101011790555b6103c25b600054610100900460ff1661049a5760005460ff161561049e565b303b155b6105015760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b606482015260840161023e565b600054610100900460ff16158015610523576000805461ffff19166101011790555b6000805462ff000019166201000017905580156103d4576000805461ff001916905550565b60405162461bcd60e51b815260206004820181905260248201527f496e697469616c697a61626c654d6f636b20666f72636564206661696c757265604482015260640161023e565b6000602082840312156105a257600080fd5b503591905056fea164736f6c6343000809000a";

type InitializableMockConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InitializableMockConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InitializableMock__factory extends ContractFactory {
  constructor(...args: InitializableMockConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<InitializableMock> {
    return super.deploy(overrides || {}) as Promise<InitializableMock>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): InitializableMock {
    return super.attach(address) as InitializableMock;
  }
  connect(signer: Signer): InitializableMock__factory {
    return super.connect(signer) as InitializableMock__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InitializableMockInterface {
    return new utils.Interface(_abi) as InitializableMockInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InitializableMock {
    return new Contract(address, _abi, signerOrProvider) as InitializableMock;
  }
}
