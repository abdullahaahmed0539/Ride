/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  MerkleProofWrapper,
  MerkleProofWrapperInterface,
} from "../MerkleProofWrapper";

const _abi = [
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "processProof",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes32[]",
        name: "proof",
        type: "bytes32[]",
      },
      {
        internalType: "bytes32",
        name: "root",
        type: "bytes32",
      },
      {
        internalType: "bytes32",
        name: "leaf",
        type: "bytes32",
      },
    ],
    name: "verify",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506102c6806100206000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c80635a9a49c71461003b57806362702a6b14610063575b600080fd5b61004e6100493660046101e7565b610084565b60405190151581526020015b60405180910390f35b610076610071366004610235565b610099565b60405190815260200161005a565b60006100918484846100ac565b949350505050565b60006100a583836100c2565b9392505050565b6000826100b985846100c2565b14949350505050565b600081815b845181101561012e5760008582815181106100e4576100e461027a565b6020026020010151905080831161010a576000838152602082905260409020925061011b565b600081815260208490526040902092505b508061012681610290565b9150506100c7565b509392505050565b634e487b7160e01b600052604160045260246000fd5b600082601f83011261015d57600080fd5b8135602067ffffffffffffffff8083111561017a5761017a610136565b8260051b604051601f19603f8301168101818110848211171561019f5761019f610136565b6040529384528581018301938381019250878511156101bd57600080fd5b83870191505b848210156101dc578135835291830191908301906101c3565b979650505050505050565b6000806000606084860312156101fc57600080fd5b833567ffffffffffffffff81111561021357600080fd5b61021f8682870161014c565b9660208601359650604090950135949350505050565b6000806040838503121561024857600080fd5b823567ffffffffffffffff81111561025f57600080fd5b61026b8582860161014c565b95602094909401359450505050565b634e487b7160e01b600052603260045260246000fd5b60006000198214156102b257634e487b7160e01b600052601160045260246000fd5b506001019056fea164736f6c6343000809000a";

type MerkleProofWrapperConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MerkleProofWrapperConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MerkleProofWrapper__factory extends ContractFactory {
  constructor(...args: MerkleProofWrapperConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MerkleProofWrapper> {
    return super.deploy(overrides || {}) as Promise<MerkleProofWrapper>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MerkleProofWrapper {
    return super.attach(address) as MerkleProofWrapper;
  }
  connect(signer: Signer): MerkleProofWrapper__factory {
    return super.connect(signer) as MerkleProofWrapper__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MerkleProofWrapperInterface {
    return new utils.Interface(_abi) as MerkleProofWrapperInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MerkleProofWrapper {
    return new Contract(address, _abi, signerOrProvider) as MerkleProofWrapper;
  }
}
