/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ControllerInterface extends utils.Interface {
  functions: {
    "bookingLog(string,string,string,string,string,string,string)": FunctionFragment;
    "checkifSufficientCoins(address,uint256)": FunctionFragment;
    "checkifSufficientCollat(address)": FunctionFragment;
    "coins()": FunctionFragment;
    "collectDisputeAmount(address,uint256,address)": FunctionFragment;
    "disputeResult(address,address,uint256,uint256,uint256)": FunctionFragment;
    "getBalances(address)": FunctionFragment;
    "getContractWorth()": FunctionFragment;
    "giveCollatToDriver(address,uint256)": FunctionFragment;
    "mintRideCoins(address,uint256)": FunctionFragment;
    "tripLog(string,string,string,string,string,string,string,string,string,string)": FunctionFragment;
    "watcher()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "bookingLog",
    values: [string, string, string, string, string, string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "checkifSufficientCoins",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "checkifSufficientCollat",
    values: [string]
  ): string;
  encodeFunctionData(functionFragment: "coins", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "collectDisputeAmount",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "disputeResult",
    values: [string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getBalances", values: [string]): string;
  encodeFunctionData(
    functionFragment: "getContractWorth",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "giveCollatToDriver",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "mintRideCoins",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "tripLog",
    values: [
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string,
      string
    ]
  ): string;
  encodeFunctionData(functionFragment: "watcher", values?: undefined): string;

  decodeFunctionResult(functionFragment: "bookingLog", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "checkifSufficientCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "checkifSufficientCollat",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "coins", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "collectDisputeAmount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disputeResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getBalances",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getContractWorth",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "giveCollatToDriver",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "mintRideCoins",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "tripLog", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "watcher", data: BytesLike): Result;

  events: {
    "Booking(string,string,string,string,string,string,string)": EventFragment;
    "Trip(string,string,string,string,string,string,string,string,string,string)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Booking"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Trip"): EventFragment;
}

export type BookingEvent = TypedEvent<
  [string, string, string, string, string, string, string],
  {
    bookingID: string;
    riderID: string;
    driverID: string;
    bookingTime: string;
    pickup: string;
    dropoff: string;
    status: string;
  }
>;

export type BookingEventFilter = TypedEventFilter<BookingEvent>;

export type TripEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string,
    string
  ],
  {
    bookingID: string;
    distance: string;
    startTime: string;
    endTime: string;
    total: string;
    fuelCost: string;
    waitTimeCostPerMin: string;
    disputeCost: string;
    waitTimeCost: string;
    milesCost: string;
  }
>;

export type TripEventFilter = TypedEventFilter<TripEvent>;

export interface Controller extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ControllerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    bookingLog(
      bookingID: string,
      riderID: string,
      driverID: string,
      bookingTime: string,
      pickup: string,
      dropoff: string,
      status: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    checkifSufficientCoins(
      _rider: string,
      _estimateFare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    checkifSufficientCollat(
      _driver: string,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    coins(overrides?: CallOverrides): Promise<[string]>;

    collectDisputeAmount(
      _rider: string,
      _amount: BigNumberish,
      _driver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    disputeResult(
      _rider: string,
      _driver: string,
      _amount: BigNumberish,
      _riderVote: BigNumberish,
      _driverVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    getBalances(_user: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getContractWorth(overrides?: CallOverrides): Promise<[BigNumber]>;

    giveCollatToDriver(
      _driver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    mintRideCoins(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    tripLog(
      bookingID: string,
      distance: string,
      startTime: string,
      endTime: string,
      total: string,
      fuelCost: string,
      waitTimeCostPerMin: string,
      disputeCost: string,
      waitTimeCost: string,
      milesCost: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    watcher(overrides?: CallOverrides): Promise<[string]>;
  };

  bookingLog(
    bookingID: string,
    riderID: string,
    driverID: string,
    bookingTime: string,
    pickup: string,
    dropoff: string,
    status: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  checkifSufficientCoins(
    _rider: string,
    _estimateFare: BigNumberish,
    overrides?: CallOverrides
  ): Promise<boolean>;

  checkifSufficientCollat(
    _driver: string,
    overrides?: CallOverrides
  ): Promise<boolean>;

  coins(overrides?: CallOverrides): Promise<string>;

  collectDisputeAmount(
    _rider: string,
    _amount: BigNumberish,
    _driver: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  disputeResult(
    _rider: string,
    _driver: string,
    _amount: BigNumberish,
    _riderVote: BigNumberish,
    _driverVote: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  getBalances(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

  getContractWorth(overrides?: CallOverrides): Promise<BigNumber>;

  giveCollatToDriver(
    _driver: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  mintRideCoins(
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  tripLog(
    bookingID: string,
    distance: string,
    startTime: string,
    endTime: string,
    total: string,
    fuelCost: string,
    waitTimeCostPerMin: string,
    disputeCost: string,
    waitTimeCost: string,
    milesCost: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  watcher(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    bookingLog(
      bookingID: string,
      riderID: string,
      driverID: string,
      bookingTime: string,
      pickup: string,
      dropoff: string,
      status: string,
      overrides?: CallOverrides
    ): Promise<void>;

    checkifSufficientCoins(
      _rider: string,
      _estimateFare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    checkifSufficientCollat(
      _driver: string,
      overrides?: CallOverrides
    ): Promise<boolean>;

    coins(overrides?: CallOverrides): Promise<string>;

    collectDisputeAmount(
      _rider: string,
      _amount: BigNumberish,
      _driver: string,
      overrides?: CallOverrides
    ): Promise<void>;

    disputeResult(
      _rider: string,
      _driver: string,
      _amount: BigNumberish,
      _riderVote: BigNumberish,
      _driverVote: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    getBalances(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getContractWorth(overrides?: CallOverrides): Promise<BigNumber>;

    giveCollatToDriver(
      _driver: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    mintRideCoins(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    tripLog(
      bookingID: string,
      distance: string,
      startTime: string,
      endTime: string,
      total: string,
      fuelCost: string,
      waitTimeCostPerMin: string,
      disputeCost: string,
      waitTimeCost: string,
      milesCost: string,
      overrides?: CallOverrides
    ): Promise<void>;

    watcher(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    "Booking(string,string,string,string,string,string,string)"(
      bookingID?: null,
      riderID?: null,
      driverID?: null,
      bookingTime?: null,
      pickup?: null,
      dropoff?: null,
      status?: null
    ): BookingEventFilter;
    Booking(
      bookingID?: null,
      riderID?: null,
      driverID?: null,
      bookingTime?: null,
      pickup?: null,
      dropoff?: null,
      status?: null
    ): BookingEventFilter;

    "Trip(string,string,string,string,string,string,string,string,string,string)"(
      bookingID?: null,
      distance?: null,
      startTime?: null,
      endTime?: null,
      total?: null,
      fuelCost?: null,
      waitTimeCostPerMin?: null,
      disputeCost?: null,
      waitTimeCost?: null,
      milesCost?: null
    ): TripEventFilter;
    Trip(
      bookingID?: null,
      distance?: null,
      startTime?: null,
      endTime?: null,
      total?: null,
      fuelCost?: null,
      waitTimeCostPerMin?: null,
      disputeCost?: null,
      waitTimeCost?: null,
      milesCost?: null
    ): TripEventFilter;
  };

  estimateGas: {
    bookingLog(
      bookingID: string,
      riderID: string,
      driverID: string,
      bookingTime: string,
      pickup: string,
      dropoff: string,
      status: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    checkifSufficientCoins(
      _rider: string,
      _estimateFare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    checkifSufficientCollat(
      _driver: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    coins(overrides?: CallOverrides): Promise<BigNumber>;

    collectDisputeAmount(
      _rider: string,
      _amount: BigNumberish,
      _driver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    disputeResult(
      _rider: string,
      _driver: string,
      _amount: BigNumberish,
      _riderVote: BigNumberish,
      _driverVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    getBalances(_user: string, overrides?: CallOverrides): Promise<BigNumber>;

    getContractWorth(overrides?: CallOverrides): Promise<BigNumber>;

    giveCollatToDriver(
      _driver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    mintRideCoins(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    tripLog(
      bookingID: string,
      distance: string,
      startTime: string,
      endTime: string,
      total: string,
      fuelCost: string,
      waitTimeCostPerMin: string,
      disputeCost: string,
      waitTimeCost: string,
      milesCost: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    watcher(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    bookingLog(
      bookingID: string,
      riderID: string,
      driverID: string,
      bookingTime: string,
      pickup: string,
      dropoff: string,
      status: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    checkifSufficientCoins(
      _rider: string,
      _estimateFare: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    checkifSufficientCollat(
      _driver: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    coins(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    collectDisputeAmount(
      _rider: string,
      _amount: BigNumberish,
      _driver: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    disputeResult(
      _rider: string,
      _driver: string,
      _amount: BigNumberish,
      _riderVote: BigNumberish,
      _driverVote: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    getBalances(
      _user: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getContractWorth(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    giveCollatToDriver(
      _driver: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    mintRideCoins(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    tripLog(
      bookingID: string,
      distance: string,
      startTime: string,
      endTime: string,
      total: string,
      fuelCost: string,
      waitTimeCostPerMin: string,
      disputeCost: string,
      waitTimeCost: string,
      milesCost: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    watcher(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
